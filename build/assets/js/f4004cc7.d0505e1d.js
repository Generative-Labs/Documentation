"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[5924],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(h,i(i({ref:n},s),{},{components:t})):o.createElement(h,i({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},170:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),i=["components"],l={},c="Channel",p={unversionedId:"Web3MQ-UI-Components/coreComponent/Channel",id:"Web3MQ-UI-Components/coreComponent/Channel",title:"Channel",description:"The Channel component is a React Context provider that wraps all of the logic, functionality, and UI for an individual chat channel. It provides five separate contexts to its children:",source:"@site/docs/Web3MQ-UI-Components/coreComponent/Channel.md",sourceDirName:"Web3MQ-UI-Components/coreComponent",slug:"/Web3MQ-UI-Components/coreComponent/Channel",permalink:"/docs/Web3MQ-UI-Components/coreComponent/Channel",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Chat",permalink:"/docs/Web3MQ-UI-Components/coreComponent/Chat"},next:{title:"Channel List",permalink:"/docs/Web3MQ-UI-Components/coreComponent/ChannelList"}},s={},u=[{value:"Basic Usage",id:"basic-usage",level:2}],m={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"channel"},"Channel"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Channel")," component is a React Context provider that wraps all of the logic, functionality, and UI for an individual chat channel. It provides five separate contexts to its children:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ChannelStateContext - stateful data (ex: messages or members)"),(0,r.kt)("li",{parentName:"ul"},"ChannelActionContext - action handlers (ex: sendMessage or openThread)"),(0,r.kt)("li",{parentName:"ul"},"ComponentContext - custom component UI overrides (ex: Avatar or Message)")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Channel")," component does not inject any UI, so its implementation is fairly simple and can be handled in one of two ways, both with and without a ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelList")," component. If you are using a ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelList"),", do not add a ",(0,r.kt)("inlineCode",{parentName:"p"},"channel")," object as a prop on ",(0,r.kt)("inlineCode",{parentName:"p"},"Channel"),". However in the absence of a ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelList"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"channel")," prop is required. By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelList")," sets the active ",(0,r.kt)("inlineCode",{parentName:"p"},"channel")," object, which is then injected it into the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChannelStateContext"),", so manual prop passing is not required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Chat client={client}>\n  <ChannelList />\n  <Channel>\n    <MessageList />\n    <MessageInput />\n  </Channel>\n</Chat>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const { messages } = useChannelStateContext();\nconst { handleOpenThread } = useChannelActionContext();\nconst { Message } = useComponentContext();\n")))}d.isMDXComponent=!0}}]);