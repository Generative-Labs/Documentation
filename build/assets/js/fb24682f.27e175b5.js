"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[9073],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,g=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3625:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:1},l="Quickstart",c={unversionedId:"Web3MQ-SDK/Python-SDK/quickstart",id:"Web3MQ-SDK/Python-SDK/quickstart",title:"Quickstart",description:"_",source:"@site/docs/Web3MQ-SDK/Python-SDK/quickstart.md",sourceDirName:"Web3MQ-SDK/Python-SDK",slug:"/Web3MQ-SDK/Python-SDK/quickstart",permalink:"/docs/Web3MQ-SDK/Python-SDK/quickstart",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/Web3MQ-SDK/Python-SDK/intro"},next:{title:"Register",permalink:"/docs/Web3MQ-SDK/Python-SDK/register"}},u={},m=[{value:"Usage",id:"usage",level:2},{value:"Install",id:"install",level:3},{value:"Init web3mq client",id:"init-web3mq-client",level:3},{value:"Register",id:"register",level:3},{value:"Get login random secret",id:"get-login-random-secret",level:3},{value:"Sign login_random_secret in MetaMask",id:"sign-login_random_secret-in-metamask",level:3},{value:"Login",id:"login",level:3},{value:"Connect to server",id:"connect-to-server",level:3},{value:"Send message",id:"send-message",level:3}],p={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quickstart"},"Quickstart"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Install web3mq sdk"),(0,i.kt)("li",{parentName:"ol"},"Init web3mq client"),(0,i.kt)("li",{parentName:"ol"},"Call Register function"),(0,i.kt)("li",{parentName:"ol"},"Get login random secret"),(0,i.kt)("li",{parentName:"ol"},"Sign login_random_secret in MetaMask"),(0,i.kt)("li",{parentName:"ol"},"Call User Login function"),(0,i.kt)("li",{parentName:"ol"},"Connect to chat server"),(0,i.kt)("li",{parentName:"ol"},"Send message")),(0,i.kt)("h3",{id:"install"},"Install"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip intall web3mq\n")),(0,i.kt)("h3",{id:"init-web3mq-client"},"Init web3mq client"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from web3mq.client import Web3mqClient\n\n# default env is prod\nprod_client = Web3mqClient()\n\n# Specify test environment\ntest_client = Web3mqClient(env='test')\n")),(0,i.kt)("h3",{id:"register"},"Register"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from web3mq.client import Web3mqClient\n\nclient = Web3mqClient()\n\nresult = client.do_register(\n    \"your wallet address\", # User's ETH wallet address, get it by MetaMask's API\n    'twitter', # platform options twitter/instagram/facebook/discord\n    'your username in twitter'\n)\n")),(0,i.kt)("h3",{id:"get-login-random-secret"},"Get login random secret"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from web3mq.client import Web3mqClient\n\nclient = Web3mqClient()\n\nwallet_address = "your wallet address"\n\nlogin_random_secret = client.login_random_secret(wallet_address)\n')),(0,i.kt)("h3",{id:"sign-login_random_secret-in-metamask"},"Sign login_random_secret in MetaMask"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"sign in metamask in browser use javascript")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'let signContent = `Web3MQ wants you to sign in with your Ethereum account:\n${your_wallet_address}\nSign-In With Ethereum Example Statement\nURI: https://chat.web3messaging.online\nVersion: 1\nChain ID: 1\nNonce: ${your login random secret}\nIssued At: 2022-05-23T12:52:57.500Z\nExpiration Time: 2022-05-25T12:52:57.489Z`;\n\nconst signature = await ethereum.request({\n  method: "personal_sign",\n  params: [signContent, your_wallet_address, "swapchat"],\n});\n\nalert("Your MetaMask\'s signature is: " + signature)\n')),(0,i.kt)("h3",{id:"login"},"Login"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from web3mq.client import Web3mqClient\n\nclient = Web3mqClient()\n\n# Generated by MetaMask-Sign with user\'s random login secret\nsignature = "signature"\n\nresult = client.do_login("login random secret", signature, "your wallet address")\n\njwt_data = result[\'access_token\']\n')),(0,i.kt)("h3",{id:"connect-to-server"},"Connect to server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import paho.mqtt.client as mqtt\n\nCHAT_SERVER_DOMAIN = "msg.web3messaging.online"\n# test env test-msg.web3messaging.online\n\ndef get_chat_client(client_id):\n    mqttc = mqtt.Client(client_id, transport="websockets")\n    return mqttc\n\n# Get access_token from previou login function\njwt_data = "access token"\n\n# extract user_id from jwt_data\nuser_id = "your user_id"\n\nchatclient = get_chat_client(user_id)\nchatclient.tls_set()\nchatclient.username_pw_set(username=user_id, password=jwt_data)\n\nchatclient.connect(CHAT_SERVER_DOMAIN, 443)\n')),(0,i.kt)("h3",{id:"send-message"},"Send message"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import json\n\n# extract user_id from "access_token" from login api response\nuser_id = "your user_id"\n\ntopic = "msg/" + user_id\n\npayload = {\n    "from_uid" : user_id,\n    "to_room_id" : room_id,\n    "msg_contents" : "Hello",\n    "msg_type" : "text"\n}\n\nchatclient.publish(topic, json.dumps(payload))\n')))}d.isMDXComponent=!0}}]);