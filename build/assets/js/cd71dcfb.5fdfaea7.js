"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[386],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return p}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(t),p=o,g=m["".concat(c,".").concat(p)]||m[p]||u[p]||r;return t?a.createElement(g,s(s({ref:n},d),{},{components:t})):a.createElement(g,s({ref:n},d))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9487:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),s=["components"],i={sidebar_position:0},c="Jssdk",l={unversionedId:"Tutorial/JS-SDK",id:"Tutorial/JS-SDK",title:"Jssdk",description:"Intro",source:"@site/docs/Tutorial/JS-SDK.md",sourceDirName:"Tutorial",slug:"/Tutorial/JS-SDK",permalink:"/docs/Tutorial/JS-SDK",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/Intro"},next:{title:"Intro",permalink:"/docs/Web3MQ-SDK/JS-SDK/Intro"}},d={},u=[{value:"Intro",id:"intro",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"You need to install metamask on your device first",id:"you-need-to-install-metamask-on-your-device-first",level:4},{value:"Install web3-mq",id:"install-web3-mq",level:4},{value:"Official start",id:"official-start",level:2},{value:"Connect MetaMask",id:"connect-metamask",level:3},{value:"Register Web3MQ user",id:"register-web3mq-user",level:3},{value:"Create Web3MQ client connection",id:"create-web3mq-client-connection",level:3},{value:"Create Web3MQ chat room and send message",id:"create-web3mq-chat-room-and-send-message",level:3},{value:"React Demo",id:"react-demo",level:3}],m={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jssdk"},"Jssdk"),(0,r.kt)("h2",{id:"intro"},"Intro"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This article will show you how to use web3-mq to successfully initialize the client, register users, create a chat room, and send the first message of the chat room")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("h4",{id:"you-need-to-install-metamask-on-your-device-first"},"You need to install metamask on your device first"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Download Address\uff1a ",(0,r.kt)("a",{parentName:"p",href:"https://metamask.io/download/"},"https://metamask.io/download/"))),(0,r.kt)("h4",{id:"install-web3-mq"},"Install web3-mq"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install web3-mq\nor\nyarn add web3-mq\n")),(0,r.kt)("h2",{id:"official-start"},"Official start"),(0,r.kt)("h3",{id:"connect-metamask"},"Connect MetaMask"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import Web3 from "web3";\n\nconst getEthAccount = async () => {\n    //@ts-ignore\n    const web3 = new Web3(window.ethereum);\n    let address = "";\n    // @ts-ignore\n    const permissionRes = await web3.currentProvider\n        // @ts-ignore\n        .request({\n            method: "wallet_requestPermissions",\n            params: [{eth_accounts: {}}],\n        })\n        .catch((e: any) => {\n            console.log(e);\n        });\n    if (permissionRes) {\n        const accounts = await web3.eth.requestAccounts();\n        address = accounts[0];\n        console.log("\u8fde\u63a5\u7684\u5730\u5740", address);\n    }\n    return address;\n};\n')),(0,r.kt)("h3",{id:"register-web3mq-user"},"Register Web3MQ user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {PLATFORM_ENUM, register} from "web3-mq";\n\n\nconst registerUser = async () => {\n    const address = await getEthAccount();\n    const data = await register({\n        platform: PLATFORM_ENUM.OPENSEA,\n        user_name: address,\n    });\n    console.log(data, "data");\n    // response\n    // const res = {\n    //   user_id: "61f1323bfa9373fc26460471",\n    //   nick_name: "zhaowei62583836",\n    //   twitter_username: "zhaowei62583836",\n    //   twitter_avatar:\n    //     "https://pbs.twimg.com/profile_images/1473570954345390080/YkQ8AuHu_normal.png",\n    //   instagram_username: "",\n    //   instagram_avatar: "",\n    //   facebook_username: "",\n    //   facebook_avatar: "",\n    //   discord_username: "",\n    //   discord_avatar: "",\n    //   opensea_username: "zhaoweiHouseChan",\n    //   opensea_avatar:\n    //     "https://storage.googleapis.com/opensea-static/opensea-profile/8.png",\n    //   eth_wallet_address: "0x9b6a5a1dd55ea481f76b782862e7df2977dffe6c",\n    //   ens_name: "",\n    //   status: "0100001",\n    //   created_at: 0,\n    // };\n\n    return data;\n};\n\n')),(0,r.kt)("h3",{id:"create-web3mq-client-connection"},"Create Web3MQ client connection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {MetaMask, PLATFORM_ENUM, register} from \"web3-mq\";\n\n\nconst getLoginToken = async () => {\n    const token = await MetaMask.signMetaMask();\n    console.log(token, \"token\");\n\n    return token;\n};\n\nconst initClient = async () => {\n    const token = await getLoginToken();\n    const client = Web3MQ.getInstance(token as string);\n\n    client.on('channel.created', (event: any) => {\n        console.log(event)\n        console.log('create channel')\n    })\n    client.on('channel.activeChange', (event: any) => {\n        console.log(event)\n        console.log('channel activeChange')\n    })\n    client.on('channel.updated', (event: any) => {\n        console.log(event)\n        console.log('channel.updated')\n    })\n    client.on('message.getList', (event: any) => {\n        console.log(event)\n        console.log('message.getList')\n    })\n    console.log(client);\n    return client;\n};\n")),(0,r.kt)("h3",{id:"create-web3mq-chat-room-and-send-message"},"Create Web3MQ chat room and send message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"\nconst sendMessage = async () => {\n    const client = await initClient();\n    // 1st: Find a person you want to talk to\n    // Eg: SwapChatNFT's twitter\n    const receiver = await register({\n        platform: PLATFORM_ENUM.OPENSEA,\n        user_name: \"0x7236b0f4f1409afdc7c9fc446943a7b84b6513a1\",\n    });\n    console.log(receiver.data.user_id);\n    // 2nd: Create room and set avtive room\n    await client.channel.createRoom({\n        user_id: receiver.data.user_id,\n    });\n    // 3rd: Get active room from client context\n    const activeChannel = client.channel.activeChannel;\n    // 4th: send a message to active room\n    const messageData = {\n        to: activeChannel?.room_id, // active room id\n        msg_type: MsgTypeEnum.text, // message type\n        msg_contents: 'hello world', // message content\n        from_uid: client.user.userInfo.user_id, // from user id\n    }\n    client.send(messageData);\n};\n")),(0,r.kt)("h3",{id:"react-demo"},"React Demo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'import {MetaMask, MsgTypeEnum, PLATFORM_ENUM, register, Web3MQ} from "web3-mq";\nimport Web3 from "web3";\n\nconst App: React.FC = () => {\n    // request permissions and get your wallet address\n    const getEthAccount = async () => {\n        //@ts-ignore\n        const web3 = new Web3(window.ethereum);\n        let address = "";\n        // @ts-ignore\n        const permissionRes = await web3.currentProvider\n            // @ts-ignore\n            .request({\n                method: "wallet_requestPermissions",\n                params: [{eth_accounts: {}}],\n            })\n            .catch((e: any) => {\n                console.log(e);\n            });\n        if (permissionRes) {\n            const accounts = await web3.eth.requestAccounts();\n            address = accounts[0];\n            console.log("\u8fde\u63a5\u7684\u5730\u5740", address);\n        }\n        return address;\n    };\n\n    const registerUser = async () => {\n        const address = await getEthAccount();\n        const data = await register({\n            platform: PLATFORM_ENUM.OPENSEA,\n            user_name: address,\n        });\n        console.log(data, "data");\n        // response\n        // const res = {\n        //   user_id: "61f1323bfa9373fc26460471",\n        //   nick_name: "zhaowei62583836",\n        //   twitter_username: "zhaowei62583836",\n        //   twitter_avatar:\n        //     "https://pbs.twimg.com/profile_images/1473570954345390080/YkQ8AuHu_normal.png",\n        //   instagram_username: "",\n        //   instagram_avatar: "",\n        //   facebook_username: "",\n        //   facebook_avatar: "",\n        //   discord_username: "",\n        //   discord_avatar: "",\n        //   opensea_username: "zhaoweiHouseChan",\n        //   opensea_avatar:\n        //     "https://storage.googleapis.com/opensea-static/opensea-profile/8.png",\n        //   eth_wallet_address: "0x9b6a5a1dd55ea481f76b782862e7df2977dffe6c",\n        //   ens_name: "",\n        //   status: "0100001",\n        //   created_at: 0,\n        // };\n\n        return data;\n    };\n\n    const getLoginToken = async () => {\n        const token = await MetaMask.signMetaMask();\n        console.log(token, "token");\n\n        return token;\n    };\n\n    const initClient = async () => {\n        const token = await getLoginToken();\n        const client = Web3MQ.getInstance(token as string);\n\n        client.on(\'channel.created\', (event: any) => {\n            console.log(event)\n            console.log(\'create channel\')\n        })\n        client.on(\'channel.activeChange\', (event: any) => {\n            console.log(event)\n            console.log(\'channel activeChange\')\n        })\n        client.on(\'channel.updated\', (event: any) => {\n            console.log(event)\n            console.log(\'channel.updated\')\n        })\n        client.on(\'message.getList\', (event: any) => {\n            console.log(event)\n            console.log(\'message.getList\')\n        })\n        console.log(client);\n        return client;\n    };\n\n    const sendMessage = async () => {\n        const client = await initClient();\n        // 1st: Find a person you want to talk to\n        // Eg: SwapChatNFT\'s twitter\n        const receiver = await register({\n            platform: PLATFORM_ENUM.OPENSEA,\n            user_name: "0x7236b0f4f1409afdc7c9fc446943a7b84b6513a1",\n        });\n        console.log(receiver.data.user_id);\n        // 2nd: Create room and set avtive room\n        await client.channel.createRoom({\n            user_id: receiver.data.user_id,\n        });\n        // 3rd: Get active room from client context\n        const activeChannel = client.channel.activeChannel;\n        // 4th: send a message to active room\n        const messageData = {\n            to: activeChannel?.room_id, // active room id\n            msg_type: MsgTypeEnum.text, // message type\n            msg_contents: \'hello world\', // message content\n            from_uid: client.user.userInfo.user_id, // from user id\n        }\n        client.send(messageData);\n    };\n\n    const testPrint = () => {\n        console.log("\u6d4b\u8bd5\u6309\u94ae");\n    };\n    return (\n        <div>\n            <div style={{marginTop: "20px"}}>\n                <button onClick={getEthAccount}>Get Eth Account Address</button>\n            </div>\n            <div style={{marginTop: "20px"}}>\n                <button onClick={registerUser}>Register User</button>\n            </div>\n            <div style={{marginTop: "20px"}}>\n                <button onClick={initClient}>Init Client</button>\n            </div>\n            <div style={{marginTop: "20px"}}>\n                <button onClick={sendMessage}>Send Message</button>\n            </div>\n            <div style={{marginTop: "20px"}}>\n                <button onClick={testPrint}>\u6d4b\u8bd5\u6309\u94ae</button>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n\n')))}p.isMDXComponent=!0}}]);