"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[6545],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),p=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(i.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,g=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(g,s(s({ref:n},l),{},{components:t})):r.createElement(g,s({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9383:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),s=["components"],c={sidebar_position:0},i="Overview",p={unversionedId:"Web3MQ-API/Intro",id:"Web3MQ-API/Intro",title:"Overview",description:"API endpoint",source:"@site/docs/Web3MQ-API/Intro.md",sourceDirName:"Web3MQ-API",slug:"/Web3MQ-API/Intro",permalink:"/docs/Web3MQ-API/Intro",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Structs",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Structs/"},next:{title:"Overview",permalink:"/docs/Web3MQ-API/quickstart/"}},l={},m=[{value:"HTTP API list",id:"http-api-list",level:2},{value:"Websocket API list",id:"websocket-api-list",level:2},{value:"Create Websocket Connect",id:"create-websocket-connect",level:3},{value:"Send connect command",id:"send-connect-command",level:3},{value:"Receive connect response",id:"receive-connect-response",level:3},{value:"Send message",id:"send-message",level:3},{value:"Receive message",id:"receive-message",level:3}],u={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"overview"},"Overview"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"API endpoint")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-1.web3mq.com"},"https://testnet-us-west-1-1.web3mq.com")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-2.web3mq.com"},"https://testnet-us-west-1-2.web3mq.com")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-1.web3mq.com"},"https://testnet-ap-jp-1.web3mq.com")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-2.web3mq.com"},"https://testnet-ap-jp-2.web3mq.com")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-1.web3mq.com"},"https://testnet-ap-singapore-1.web3mq.com")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-2.web3mq.com"},"https://testnet-ap-singapore-2.web3mq.com"))),(0,o.kt)("h2",{id:"http-api-list"},"HTTP API list"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Contact"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Send friend request"),(0,o.kt)("li",{parentName:"ul"},"User Follow someone"),(0,o.kt)("li",{parentName:"ul"},"Get my follower list"),(0,o.kt)("li",{parentName:"ul"},"Get my following list"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Group"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"List of groups i have joined"),(0,o.kt)("li",{parentName:"ul"},"Get group member list"),(0,o.kt)("li",{parentName:"ul"},"Create group"),(0,o.kt)("li",{parentName:"ul"},"Join group"),(0,o.kt)("li",{parentName:"ul"},"Invitation to join the group"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Chat"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Get my chat list"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Message"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Get history messages")))),(0,o.kt)("h2",{id:"websocket-api-list"},"Websocket API list"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Connect Command"),(0,o.kt)("li",{parentName:"ul"},"Send Message"),(0,o.kt)("li",{parentName:"ul"},"Receive Message")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Web3MQ JSSDK")," or build protobuf yourself")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Connect Command protobuf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'syntax = "proto3";\n\n// msgSign = ed25519 private key signing(nodeId + userId + timestamp)\n\nmessage ConnectCommand {\n    string nodeId = 1;\n    string userId = 2;\n    uint64 timestamp = 3;\n    string msgSign = 4;\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Message protobuf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'syntax = "proto3";\n\n\nmessage Web3MQRequestMessage {\n    bytes payload = 1;\n    string contentTopic = 2;\n    uint32 version = 3;\n    string comeFrom = 4;\n    string fromSign = 5;\n    string payloadType = 6;\n    string cipherSuite = 7;\n    bool needStore = 8;\n    uint64 timestamp = 9;\n    string messageId = 10;\n}\n')),(0,o.kt)("h3",{id:"create-websocket-connect"},"Create Websocket Connect"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"javascript example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const WS_PROTOCOL = 'wss'; // ws or wss\n\nconst HostURL = 'us-west-2.web3mq'; // choose one domain\n\nconst GetWSConn = () => {\n  const wsurl = WS_PROTOCOL + '://' + HostURL + '/messages';\n  const wsconn = new WebSocket(wsurl);\n  wsconn.binaryType = 'arraybuffer'; // !important Web3MQ send message use protobuf\n  return wsconn;\n};\n\nconst GetContactBytes = (command: any, bytes: Uint8Array) => {\n  // client category type\n  const categoryType = 10;\n  const concatArray = new Uint8Array([categoryType, command, ...bytes]);\n\n  return concatArray;\n};\n")),(0,o.kt)("h3",{id:"send-connect-command"},"Send connect command"),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// pb/connect build from protobuf file\nimport { ConnectCommand } from 'pb/connect';\n\n// connect command type\nconst PbTypeConnectReqCommand = 0b00000010;\n\nlet wsconn;\nwsconn = GetWSConn();\n\n// signature = ed25519 private key signing(nodeId + userId + timestamp)\nlet reqCmd: ConnectCommand = {\n  nodeId: nodeId,\n  userId: userId,\n  timestamp: ts,\n  msgSign: signature,\n};\n\nlet bytes = ConnectCommand.toBinary(reqCmd);\nwsconn.send(concatArray);\n")),(0,o.kt)("h3",{id:"receive-connect-response"},"Receive connect response"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"more ProtoType see ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtoType docs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const PbTypeConnectRespCommand = 0b00000011;\n\nlet wsconn;\nwsconn = GetWSConn();\n\nwsconn.onmessage = function (event) {\n  var respData = new Uint8Array(event.data);\n\n  const PbType = respData[1];\n  const bytes = respData.slice(2, respData.length);\n\n  if (PbType == PbTypeConnectRespCommand) {\n    console.log('Connect success');\n  }\n};\n")),(0,o.kt)("h3",{id:"send-message"},"Send message"),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// pb/message build from protobuf file\nimport { Web3MQRequestMessage } from 'pb/message';\n\n// message proto type\nconst PbTypeMessage = 0b00010000;\n\nlet wsconn;\nwsconn = GetWSConn();\n\nvar payload = new TextEncoder().encode('hello web3mq');\n\nlet msgReq: Web3MQRequestMessage = {\n  payload: payload,\n  contentTopic: topic,\n  version: 1,\n  comeFrom: userId,\n  fromSign: fromSign,\n  payloadType: 'text/plain; charset=utf-8',\n  cipherSuite: 'NONE',\n  needStore: needStore,\n  timestamp: BigInt(timestamp),\n  messageId: msgid,\n};\n\nlet bytes = Web3MQRequestMessage.toBinary(msgReq);\n\nconst GetContactBytes = (command: any, bytes: Uint8Array) => {\n  // client category type\n  const categoryType = 10;\n  const concatArray = new Uint8Array([categoryType, command, ...bytes]);\n\n  return concatArray;\n};\n\n\nconst concatArray = GetContactBytes(PbTypeMessage, bytes);\n\nwsconn.send(concatArray);\n")),(0,o.kt)("h3",{id:"receive-message"},"Receive message"),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// pb/message build from protobuf file\nimport { Web3MQRequestMessage } from 'pb/message';\n\n// message proto type\nconst PbTypeMessage = 0b00010000;\n\nlet wsconn;\nwsconn = GetWSConn();\n\nwsconn.onmessage = function (event) {\n  var respData = new Uint8Array(event.data);\n\n  const PbType = respData[1];\n  const bytes = respData.slice(2, respData.length);\n\n  if (PbType == PbTypeMessage) {\n    console.log('Receive message');\n  }\n};\n")))}d.isMDXComponent=!0}}]);