"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[4662],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),i=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=i(a),d=r,k=m["".concat(u,".").concat(d)]||m[d]||p[d]||s;return a?n.createElement(k,o(o({ref:t},c),{},{components:a})):n.createElement(k,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var i=2;i<s;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5794:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return p}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),o=["components"],l={sidebar_position:0},u="Intro",i={unversionedId:"Web3MQ-RESTFul-API/Intro",id:"Web3MQ-RESTFul-API/Intro",title:"Intro",description:"API endpoint",source:"@site/docs/Web3MQ-RESTFul-API/Intro.md",sourceDirName:"Web3MQ-RESTFul-API",slug:"/Web3MQ-RESTFul-API/Intro",permalink:"/docs/Web3MQ-RESTFul-API/Intro",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Chat",permalink:"/docs/Web3MQ-SDK/Python-SDK/chat"},next:{title:"Details",permalink:"/docs/Web3MQ-RESTFul-API/User/"}},c={},p=[{value:"API endpoint",id:"api-endpoint",level:2},{value:"How to authorization with JWT",id:"how-to-authorization-with-jwt",level:2},{value:"Quickstart",id:"quickstart",level:2}],m={toc:p};function d(e){var t=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"intro"},"Intro"),(0,s.kt)("h2",{id:"api-endpoint"},"API endpoint"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Production env: ",(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("a",{parentName:"strong",href:"https://swapchat.me"},"https://swapchat.me"))),(0,s.kt)("li",{parentName:"ul"},"Development env: ",(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("a",{parentName:"strong",href:"https://test.swapchat.me"},"https://test.swapchat.me")))),(0,s.kt)("h2",{id:"how-to-authorization-with-jwt"},"How to authorization with JWT"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"call ",(0,s.kt)("a",{parentName:"li",href:"/docs/Web3MQ-RESTFul-API/User/user-login#login-with-metamask-sign"},"login api")),(0,s.kt)("li",{parentName:"ol"},"put ",(0,s.kt)("inlineCode",{parentName:"li"},"access_token")," that from login api response into http header")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"JWT: yes")," means you need pass Authorization http header"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"http header")),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Headers"),(0,s.kt)("th",{parentName:"tr",align:null},"Required"),(0,s.kt)("th",{parentName:"tr",align:null},"Headers Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Authorization"),(0,s.kt)("td",{parentName:"tr",align:null},"Yes"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/docs/Web3MQ-RESTFul-API/User/user-login#login-with-metamask-sign"},"login api"),' response "access_token"')))),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"example")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Authorization: Bearer (your access token from login api)\n")),(0,s.kt)("h2",{id:"quickstart"},"Quickstart"),(0,s.kt)("p",null,"Install the dependency packages first:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install web3 mqtt.js -D\n")),(0,s.kt)("p",null,"then follow the steps below."),(0,s.kt)("blockquote",null,(0,s.kt)("ol",{parentName:"blockquote"},(0,s.kt)("li",{parentName:"ol"},"Use JavaScript code to get eth wallet address from MetaMask:"))),(0,s.kt)("p",null,"for example, the following code is used to get the wallet address in the browser."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import Web3 from 'web3.js'\n\nconst web3 = new Web3(Web3.givenProvider || window.ethereum)\nconsole.log(\"Web3:\", Web3.version)\n\nconst accounts = await ethereum.request({ method: 'eth_requestAccounts' });\nconst account = accounts[0];\n\nawait ethereum.request({ method: 'eth_requestAccounts' })\nalert('Your wallet address is: ' + account)\n")),(0,s.kt)("blockquote",null,(0,s.kt)("ol",{parentName:"blockquote",start:2},(0,s.kt)("li",{parentName:"ol"},"signin with your wallet address:"))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"get login random secret:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -d '{\"wallet_address\": \"your wallet address\"}' -H 'Content-Type: application/json' https://test.swapchat.me/login_random_secret\n")),(0,s.kt)("p",null,"Return:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "code":0,\n    "msg": "Here\'s your login random secret.",\n    "data":"b1e069cab9827c08700280b6ed1151fe"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"get MetaMask's signature:")),(0,s.kt)("p",null,"for example, the following code is used to get the MetaMask's signature in the browser."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'let signContent = `Web3MQ wants you to sign in with your Ethereum account:\n${account}\nSign-In With Ethereum Example Statement\nURI: https://swapchat.me\nVersion: 1\nChain ID: 1\nNonce: ${your login random secret}\nIssued At: 2022-05-23T12:52:57.500Z\nExpiration Time: 2022-05-25T12:52:57.489Z`;\nconst signature = await ethereum.request({\n  method: "personal_sign",\n  params: [signContent, address, "swapchat"],\n});\nalert("Your MetaMask\'s signature is: " + signature)\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"signin with MetaMask's signature:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -d \'{"wallet_address": "your wallet address","signature":"your signature","login_random_secret":"login_random_secret"}\' -H \'Content-Type: application/json\' https://test.swapchat.me/login_random_secret\n')),(0,s.kt)("p",null,"Return:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "code": 0,\n    "msg": "Here\'s your JWT.",\n    "data": {\n        "access_token": "your access token",\n        "user_info": {\n            "user_id": "user\'s OID",\n            "nick_name": "user\'s nick_name",\n            "twitter_username": "user\'s twitter_username",\n            "twitter_avatar": "user\'s twitter_avatar",\n            "instagram_username": "user\'s instagram_username",\n            "instagram_avatar": "user\'s instagram_avatar",\n            "facebook_username": "user\'s facebook_username",\n            "facebook_avatar": "user\'s facebook_avatar",\n            "discord_username": "user\'s discord_username",\n            "discord_avatar": "user\'s discord_avatar",\n            "opensea_username": "user\'s opensea_username",\n            "opensea_avatar": "user\'s opensea_avatar",\n            "eth_wallet_address": "user\'s eth_wallet_address",\n            "ens_name": "user\'s ens_name",\n            "status": "user\'s status",\n            "created_at": "the timestamp when user created"\n        }\n    }\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("ol",{parentName:"blockquote",start:3},(0,s.kt)("li",{parentName:"ol"},"search a user in Swapchat:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -d '{\"keyword\": \"swapchat\"}' -H 'Content-Type: application/json' -H 'Authorization: Bearer your_jwt' https://test.swapchat.me/search\n")),(0,s.kt)("p",null,"Return:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "code": 0,\n    "msg": "ok",\n    "data": [{\n        "user_id": "user\'s OID",\n        "nick_name": "user\'s nick_name",\n        "twitter_username": "user\'s twitter_username",\n        "twitter_avatar": "user\'s twitter_avatar",\n        "instagram_username": "user\'s instagram_username",\n        "instagram_avatar": "user\'s instagram_avatar",\n        "facebook_username": "user\'s facebook_username",\n        "facebook_avatar": "user\'s facebook_avatar",\n        "discord_username": "user\'s discord_username",\n        "discord_avatar": "user\'s discord_avatar",\n        "opensea_username": "user\'s opensea_username",\n        "opensea_avatar": "user\'s opensea_avatar",\n        "eth_wallet_address": "user\'s eth_wallet_address",\n        "ens_name": "user\'s ens_name",\n        "status": "user\'s status",\n        "created_at": "the timestamp when user created"\n    }]\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("ol",{parentName:"blockquote",start:4},(0,s.kt)("li",{parentName:"ol"},"create a room with target user's oid:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl -d '{\"user_id\": \"target users oid\"}' -H 'Content-Type: application/json' -H 'Authorization: Bearer your_jwt' https://test.swapchat.me/search\n")),(0,s.kt)("p",null,"Return"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "code": 0,\n    "msg": "ok",\n    "data": "room id"\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("ol",{parentName:"blockquote",start:5},(0,s.kt)("li",{parentName:"ol"},"use your 'user_id' and 'access_token' to login to message server:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'import { connect } from "mqtt"  \n\nlet client  = await mqtt.connectAsync("wss://test-msg.swapchat.me/mqtt", {\n    clientId: "your user oid",\n    username: "your user oid",\n    password: "your jwt(access_token)"\n})\n')),(0,s.kt)("blockquote",null,(0,s.kt)("ol",{parentName:"blockquote",start:6},(0,s.kt)("li",{parentName:"ol"},"publish a message to your room:"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"topic = 'msg/your_user_id'\nclient.publish(topic,\"Hello Swapchat\")\n")),(0,s.kt)("p",null,"Enjoy!"))}d.isMDXComponent=!0}}]);