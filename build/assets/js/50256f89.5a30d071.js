"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[724],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return d}});var i=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,i,o=function(t,e){if(null==t)return{};var n,i,o={},a=Object.keys(t);for(i=0;i<a.length;i++)n=a[i],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(i=0;i<a.length;i++)n=a[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=i.createContext({}),l=function(t){var e=i.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},p=function(t){var e=l(t.components);return i.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},b=i.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),b=l(n),d=o,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||a;return n?i.createElement(m,r(r({ref:e},p),{},{components:n})):i.createElement(m,r({ref:e},p))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,r=new Array(a);r[0]=b;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:o,r[1]=s;for(var l=2;l<a;l++)r[l]=n[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}b.displayName="MDXCreateElement"},7433:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var i=n(7462),o=n(3366),a=(n(7294),n(3905)),r=["components"],s={position:8.1},c="Pub/Sub",l={unversionedId:"Web3MQ-SDK/JS-SDK/PubSub/PubSub",id:"Web3MQ-SDK/JS-SDK/PubSub/PubSub",title:"Pub/Sub",description:"Properties",source:"@site/docs/Web3MQ-SDK/JS-SDK/PubSub/PubSub.md",sourceDirName:"Web3MQ-SDK/JS-SDK/PubSub",slug:"/Web3MQ-SDK/JS-SDK/PubSub/",permalink:"/docs/Web3MQ-SDK/JS-SDK/PubSub/",tags:[],version:"current",frontMatter:{position:8.1},sidebar:"tutorialSidebar",previous:{title:"Notify",permalink:"/docs/Web3MQ-SDK/JS-SDK/notify/"},next:{title:"Encryption",permalink:"/docs/Web3MQ-SDK/JS-SDK/encryption/"}},p={},u=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Init and get Client",id:"init-and-get-client",level:3},{value:"Methods",id:"methods-1",level:2},{value:"Pub/Sub Example",id:"pubsub-example",level:3},{value:"createTopic",id:"createtopic",level:3},{value:"subscribeTopic",id:"subscribetopic",level:3},{value:"publishTopicMessage",id:"publishtopicmessage",level:3},{value:"getMyCreateTopicList",id:"getmycreatetopiclist",level:3},{value:"getMySubscribeTopicList",id:"getmysubscribetopiclist",level:3},{value:"get NotificationList",id:"get-notificationlist",level:3}],b={toc:u};function d(t){var e=t.components,n=(0,o.Z)(t,r);return(0,a.kt)("wrapper",(0,i.Z)({},b,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pubsub"},"Pub/Sub"),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"myTopicList"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#topiclisttype"},"TopicListType")," ","[ ]"," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"myTopicList list")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mySubscribeList"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#subscribelisttype"},"SubscribeListType")," ","[ ]"," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"mySubscribeList list")))),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"Parameters Description"),(0,a.kt)("th",{parentName:"tr",align:null},"response"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"createTopic"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"topic_name: string"),(0,a.kt)("td",{parentName:"tr",align:null},"Promise:",(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#createtopicresponse"},"CreateTopicResponse"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"subscribeTopic"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"topicid: string"),(0,a.kt)("td",{parentName:"tr",align:null},"Promise:",(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#searchusersresponse"},"SearchUsersResponse"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"publishTopicMessage"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#topicmessagetype"},"TopicMessageType")),(0,a.kt)("td",{parentName:"tr",align:null},"Promise:",(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#searchusersresponse"},"SearchUsersResponse"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"getMyCreateTopicList"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#pageparams"},"PageParams")),(0,a.kt)("td",{parentName:"tr",align:null},"Promise:",(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#topiclisttype"},"TopicListType"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"getMySubscribeTopicList"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#pageparams"},"PageParams")),(0,a.kt)("td",{parentName:"tr",align:null},"Promise:",(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#subscribelisttype"},"SubscribeListType"))))),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"init() see: ",(0,a.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/client/#init"},"init"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"auth() see: ",(0,a.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/auth/#auth-or-resetpassword"},"register"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"login() see: ",(0,a.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/auth/#login"},"login"))),(0,a.kt)("h3",{id:"init-and-get-client"},"Init and get Client"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To use the functions of the current module, please complete the following steps first.")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"After successful login, you can get the secret key pair from the returned result"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { useEffect, useState } from 'react';\nimport { Client } from '@web3mq/client'; \n\nexport const App = () => {\n  const [fastestUrl, setFastUrl] = useState<string | null>(null);\n  useEffect(() => {\n    Client.init({\n        connectUrl: '', //\n        app_key: 'app_key', // temporary authorization key obtained by applying, will be removed in future testnets and mainnet\n    }).then(data => {\n      setFastUrl(data);\n    });\n  }, [])\n  if (!fastestUrl) return;\n  const {\n      tempPrivateKey,\n      tempPublicKey,\n      pubkeyExpiredTimestamp,\n      mainPrivateKey,\n      mainPublicKey,\n  } = loginRes\n\n  const keys = {\n      PrivateKey: tempPrivateKey,\n      PublicKey: tempPublicKey,\n      userid: localStorage.getItem('userid')\n  };\n\n  const client = Client.getInstance(keys);\n  return (\n    <Child client={client} />\n  )\n}\n")),(0,a.kt)("h2",{id:"methods-1"},"Methods"),(0,a.kt)("h3",{id:"pubsub-example"},"Pub/Sub Example"),(0,a.kt)("blockquote",null,(0,a.kt)("ol",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ol"},"Copy the ",(0,a.kt)("a",{parentName:"li",href:"/docs/Web3MQ-SDK/JS-SDK/quickStart/#root-components-code"},"Root Components")," Code to App.tsx"),(0,a.kt)("li",{parentName:"ol"},"Create a Child.tsx file and copy the Child Components Code to Child.tsx"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useEffect, useState } from 'react';\nimport { Client } from '@web3mq/client';\n\ninterface IProps {\n  client: Client;\n}\n\nconst Child: React.FC<IProps> = (props) => {\n  const { client } = props;\n  const [topicName, setTopicName] = useState<string>('');\n  const [topicId, setTopicId] = useState<string>('');\n  const [notifyList, setNotifyList] = useState<any>([]);\n  const [myTopicList, setMyTopicList] = useState<any>(null);\n  const [mySubscribeList, setMySubscribeList] = useState<any>(null);\n\n  const handleEvent = (event: { type: string }) => {\n    const { type } = event;\n    if (type === 'notification.getList') {\n      console.log('notification list -------', client.notify.notificationList);\n      setNotifyList([...notifyList, ...(client.notify.notificationList as [])]);\n    }\n    if (type === 'notification.getMyTopicList') {\n      console.log('MyTopicList------', client);\n      setMyTopicList(client.topic.myTopicList);\n    }\n    if (type === 'notification.getMySubscribeList') {\n      console.log('MySubscribeList------', client.topic.mySubscribeList);\n      setMySubscribeList(client.topic.mySubscribeList);\n    }\n  };\n\n  const getMyTopicList = async () => {\n    const data = await client.topic.getMyCreateTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  const getMySubscribeList = async () => {\n    const data = await client.topic.getMySubscribeTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  useEffect(() => {\n    client.on('notification.getList', handleEvent);\n    client.on('notification.getMyTopicList', handleEvent);\n    client.on('notification.getMySubscribeList', handleEvent);\n    return () => {\n      client.off('notification.getList', handleEvent);\n      client.off('notification.getMyTopicList', handleEvent);\n      client.off('notification.getMySubscribeList', handleEvent);\n    };\n  }, [notifyList]);\n\n  useEffect(() => {\n    getMyTopicList();\n    getMySubscribeList();\n  }, []);\n\n  const handleCreate = async () => {\n    const data = await client.topic.createTopic(topicName);\n    console.log(data);\n    await getMyTopicList();\n  };\n\n  const handleSubscribe = async () => {\n    const data = await client.topic.subscribeTopic(topicId);\n    console.log(data);\n    await getMySubscribeList();\n  };\n\n  const handlePublishMsg = async () => {\n    const params = {\n      topicid: topicId,\n      title: 'test title',\n      content: 'test content',\n    };\n    await client.topic.publishTopicMessage(params);\n  };\n\n  return (\n    <div>\n      <h1>1. Create Topic</h1>\n      <div>\n        Write topic name------\n        <input\n          type='text'\n          value={topicName}\n          onChange={(e) => {\n            setTopicName(e.target.value);\n          }}\n        />\n        <button onClick={handleCreate}>Create Topic</button>\n      </div>\n      <h4>My Topic List</h4>\n      {myTopicList?.map((item: any, idx: number) => (\n        <div key={item.topicid}>\n          {`topicid${idx + 1}-------`} <b>{item.topicid}</b>\n        </div>\n      ))}\n      <br />\n      <br />\n\n      <h1>2. Subscribe Topic</h1>\n      <div>\n        Write subscribe topic ID------\n        <input\n          type='text'\n          value={topicId}\n          onChange={(e) => {\n            setTopicId(e.target.value);\n          }}\n        />\n        <button onClick={handleSubscribe}>Subscribe Topic</button>\n      </div>\n      <h4>My Subscribe List</h4>\n      {mySubscribeList?.map((item: any, idx: number) => (\n        <div key={item.topicid}>\n          {`topicid${idx + 1}-------`}\n          <b>{item.topicid}</b>\n        </div>\n      ))}\n      <br />\n      <br />\n\n      <h1>3. Publish Msg</h1>\n      <div>\n        Write subscribe topic ID------\n        <input\n          type='text'\n          value={topicId}\n          onChange={(e) => {\n            setTopicId(e.target.value);\n          }}\n        />\n        <button onClick={handlePublishMsg}>publish Msg</button>\n      </div>\n      <h1>4. Notify List</h1>\n      {notifyList?.map((item: any, idx: number) => (\n        <div key={item.timestamp}>\n          {`notify${idx + 1}-------title:`}\n          <b>{item.title}</b>, content: <b>{item.content}</b>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Child;\n")),(0,a.kt)("h3",{id:"createtopic"},"createTopic"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Create your topic, customize the name of the topic")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from '@web3mq/client';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleCreate = async () => {\n    const data = await client.notify.createTopic('topic_name');\n    console.log(data);\n    setTopic(data.topicid);\n  };\n\n  return (\n    <div>\n      <button onClick={handleCreate}>Create Topic</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h3",{id:"subscribetopic"},"subscribeTopic"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Subscribe to other topics by topicid.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from '@web3mq/client';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleSubscribe = async () => {\n    const data = await client.notify.subscribeTopic('topicid');\n    console.log(data);\n  };\n\n  return (\n    <div>\n      <button onClick={handleSubscribe}>Subscribe Topic</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h3",{id:"publishtopicmessage"},"publishTopicMessage"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Choose your topic and post content.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from '@web3mq/client';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handlePublishMsg = async () => {\n    const params = {\n      topicid: 'topic',\n      title: 'test title',\n      content: 'test content',\n    };\n    await client.notify.publishTopicMessage(params);\n  };\n\n  return (\n    <div>\n      <button onClick={handlePublishMsg}>publish Msg</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h3",{id:"getmycreatetopiclist"},"getMyCreateTopicList"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Get the list of topics I created.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect } from 'react';\nimport { Client } from '@web3mq/client';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleEvent = (event: { type: any }) => {\n    if (event.type === 'notification.getMyTopicList') {\n      console.log(client.notify.myTopicList);\n    }\n  };\n\n  useEffect(() => {\n    client.on('notification.getMyTopicList', handleEvent);\n    return () => {\n      client.off('notification.getMyTopicList');\n    };\n  }, []);\n\n  const getMyTopicList = async () => {\n    const data = await client.notify.getMyCreateTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  return (\n    <div>\n      <button onClick={getMyTopicList}>getMyCreateTopicList</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h3",{id:"getmysubscribetopiclist"},"getMySubscribeTopicList"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Get the list of my subscribed topics.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect } from 'react';\nimport { Client } from '@web3mq/client';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleEvent = (event: { type: any }) => {\n    if (event.type === 'notification.getMySubscribeList') {\n      console.log(client.notify.mySubscribeList);\n    }\n  };\n\n  useEffect(() => {\n    client.on('notification.getMySubscribeList', handleEvent);\n    return () => {\n      client.off('notification.getMySubscribeList');\n    };\n  }, []);\n\n  const getMySubscribeList = async () => {\n    const data = await client.notify.getMySubscribeTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  return (\n    <div>\n      <button onClick={getMySubscribeList}>getMySubscribeTopicList</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h3",{id:"get-notificationlist"},"get NotificationList"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Get the list of notifications in the ",(0,a.kt)("inlineCode",{parentName:"p"},"notification.getList")," event.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect } from 'react';\nimport { Client } from '@web3mq/client';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleEvent = (event: { type: any }) => {\n    if (event.type === 'notification.getList') {\n      console.log(client.notify.notificationList);\n    }\n  };\n\n  useEffect(() => {\n    client.on('notification.getList', handleEvent);\n    return () => {\n      client.off('notification.getList');\n    };\n  }, []);\n\n  return <div>Notify Test</div>;\n};\n")))}d.isMDXComponent=!0}}]);