"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[6545],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=i(n),d=r,b=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(b,s(s({ref:t},c),{},{components:n})):a.createElement(b,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var i=2;i<o;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:0},s="Overview",p={unversionedId:"Web3MQ-API/Intro",id:"Web3MQ-API/Intro",title:"Overview",description:"API endpoint",source:"@site/docs/Web3MQ-API/Intro.md",sourceDirName:"Web3MQ-API",slug:"/Web3MQ-API/Intro",permalink:"/docs/Web3MQ-API/Intro",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"eventCenter",permalink:"/docs/Web3MQ-SDK/JS-SDK/eventCenter/"},next:{title:"Overview",permalink:"/docs/Web3MQ-API/quickstart/"}},l={},i=[{value:"HTTP API list",id:"http-api-list",level:2},{value:"Websocket API list",id:"websocket-api-list",level:2},{value:"Create Websocket Connect",id:"create-websocket-connect",level:3},{value:"Send connect command",id:"send-connect-command",level:3},{value:"Receive connect response",id:"receive-connect-response",level:3},{value:"Send message",id:"send-message",level:3},{value:"Receive message",id:"receive-message",level:3}],c={toc:i};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"API endpoint")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-1.web3mq.com"},"https://testnet-us-west-1-1.web3mq.com")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-2.web3mq.com"},"https://testnet-us-west-1-2.web3mq.com")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-1.web3mq.com"},"https://testnet-ap-jp-1.web3mq.com")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-2.web3mq.com"},"https://testnet-ap-jp-2.web3mq.com")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-1.web3mq.com"},"https://testnet-ap-singapore-1.web3mq.com")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-2.web3mq.com"},"https://testnet-ap-singapore-2.web3mq.com"))),(0,r.kt)("h2",{id:"http-api-list"},"HTTP API list"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Public Key"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Save PublicKey ",(0,r.kt)("a",{parentName:"li",href:"/docs/Web3MQ-API/pubkey"},"see detail"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Create your public key and save to Web3MQ;"),(0,r.kt)("li",{parentName:"ul"},"Web3MQ use the public key ",(0,r.kt)("inlineCode",{parentName:"li"},"verify")," your all subsequent requests"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Contact"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Get my contact list"),(0,r.kt)("li",{parentName:"ul"},"Send friend request"),(0,r.kt)("li",{parentName:"ul"},"Get friend request list"),(0,r.kt)("li",{parentName:"ul"},"Agree or Reject friend request"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Group"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"List of groups i have joined"),(0,r.kt)("li",{parentName:"ul"},"Get group member list"),(0,r.kt)("li",{parentName:"ul"},"Create group"),(0,r.kt)("li",{parentName:"ul"},"Join group"),(0,r.kt)("li",{parentName:"ul"},"Invitation to join the group"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Chat"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Get my chat list"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Message"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Get history messages")))),(0,r.kt)("h2",{id:"websocket-api-list"},"Websocket API list"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Connect Command"),(0,r.kt)("li",{parentName:"ul"},"Send Message"),(0,r.kt)("li",{parentName:"ul"},"Receive Message")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Web3MQ JSSDK")," or build protobuf yourself")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Connect Command protobuf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'syntax = "proto3";\n\n// msgSign = ed25519 private key signing(nodeId + userId + timestamp)\n\nmessage ConnectCommand {\n    string nodeId = 1;\n    string userId = 2;\n    uint64 timestamp = 3;\n    string msgSign = 4;\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Message protobuf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'syntax = "proto3";\n\n\nmessage Web3MQRequestMessage {\n    bytes payload = 1;\n    string contentTopic = 2;\n    uint32 version = 3;\n    string comeFrom = 4;\n    string fromSign = 5;\n    string payloadType = 6;\n    string cipherSuite = 7;\n    bool needStore = 8;\n    uint64 timestamp = 9;\n    string messageId = 10;\n}\n')),(0,r.kt)("h3",{id:"create-websocket-connect"},"Create Websocket Connect"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"javascript example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const WS_PROTOCOL = 'wss'; // ws or wss\n\nconst HostURL = 'us-west-2.web3mq'; // choose one domain\n\nconst GetWSConn = () => {\n  const wsurl = WS_PROTOCOL + '://' + HostURL + '/messages';\n  const wsconn = new WebSocket(wsurl);\n  wsconn.binaryType = 'arraybuffer'; // !important Web3MQ send message use protobuf\n  return wsconn;\n};\n\nconst GetContactBytes = (command: any, bytes: Uint8Array) => {\n  // client category type\n  const categoryType = 10;\n  const concatArray = new Uint8Array([categoryType, command, ...bytes]);\n\n  return concatArray;\n};\n")),(0,r.kt)("h3",{id:"send-connect-command"},"Send connect command"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// pb/connect build from protobuf file\nimport { ConnectCommand } from 'pb/connect';\n\n// connect command type\nconst PbTypeConnectReqCommand = 0b00000010;\n\nlet wsconn;\nwsconn = GetWSConn();\n\n// signature = ed25519 private key signing(nodeId + userId + timestamp)\nlet reqCmd: ConnectCommand = {\n  nodeId: nodeId,\n  userId: userId,\n  timestamp: ts,\n  msgSign: signature,\n};\n\nlet bytes = ConnectCommand.toBinary(reqCmd);\nwsconn.send(concatArray);\n")),(0,r.kt)("h3",{id:"receive-connect-response"},"Receive connect response"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"more ProtoType see ",(0,r.kt)("inlineCode",{parentName:"p"},"ProtoType docs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const PbTypeConnectRespCommand = 0b00000011;\n\nlet wsconn;\nwsconn = GetWSConn();\n\nwsconn.onmessage = function (event) {\n  var respData = new Uint8Array(event.data);\n\n  const PbType = respData[1];\n  const bytes = respData.slice(2, respData.length);\n\n  if (PbType == PbTypeConnectRespCommand) {\n    console.log('Connect success');\n  }\n};\n")),(0,r.kt)("h3",{id:"send-message"},"Send message"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// pb/message build from protobuf file\nimport { Web3MQRequestMessage } from 'pb/message';\n\n// message proto type\nconst PbTypeMessage = 0b00010000;\n\nlet wsconn;\nwsconn = GetWSConn();\n\nvar payload = new TextEncoder().encode('hello web3mq');\n\nlet msgReq: Web3MQRequestMessage = {\n  payload: payload,\n  contentTopic: topic,\n  version: 1,\n  comeFrom: userId,\n  fromSign: fromSign,\n  payloadType: 'text/plain; charset=utf-8',\n  cipherSuite: 'NONE',\n  needStore: needStore,\n  timestamp: BigInt(timestamp),\n  messageId: msgid,\n};\n\nlet bytes = Web3MQRequestMessage.toBinary(msgReq);\n\nconst GetContactBytes = (command: any, bytes: Uint8Array) => {\n  // client category type\n  const categoryType = 10;\n  const concatArray = new Uint8Array([categoryType, command, ...bytes]);\n\n  return concatArray;\n};\n\n\nconst concatArray = GetContactBytes(PbTypeMessage, bytes);\n\nwsconn.send(concatArray);\n")),(0,r.kt)("h3",{id:"receive-message"},"Receive message"),(0,r.kt)("hr",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// pb/message build from protobuf file\nimport { Web3MQRequestMessage } from 'pb/message';\n\n// message proto type\nconst PbTypeMessage = 0b00010000;\n\nlet wsconn;\nwsconn = GetWSConn();\n\nwsconn.onmessage = function (event) {\n  var respData = new Uint8Array(event.data);\n\n  const PbType = respData[1];\n  const bytes = respData.slice(2, respData.length);\n\n  if (PbType == PbTypeMessage) {\n    console.log('Receive message');\n  }\n};\n")))}m.isMDXComponent=!0}}]);