"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[9445],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,h=u["".concat(r,".").concat(m)]||u[m]||d[m]||s;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,l=new Array(s);l[0]=u;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9258:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return r},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return d}});var a=n(7462),i=n(3366),s=(n(7294),n(3905)),l=["components"],o={},r="Web3MQ Tutorial",c={unversionedId:"Tutorials/web3mq/web3mq",id:"Tutorials/web3mq/web3mq",title:"Web3MQ Tutorial",description:"This tutorial walks you through the key concepts of Web3MQ using a sample react project and successfully",source:"@site/docs/Tutorials/web3mq/web3mq.md",sourceDirName:"Tutorials/web3mq",slug:"/Tutorials/web3mq/",permalink:"/docs/Tutorials/web3mq/",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/Intro"},next:{title:"dotbit",permalink:"/docs/Tutorials/dotbit/"}},p={},d=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Initialize Client",id:"initialize-client",level:3},{value:"Initialize Client and Connect to Web3MQ Network",id:"initialize-client-and-connect-to-web3mq-network",level:4},{value:"API endpoints",id:"api-endpoints",level:4},{value:"Register User",id:"register-user",level:3},{value:"Get client instance",id:"get-client-instance",level:3},{value:"Events",id:"events",level:3},{value:"Send message",id:"send-message",level:3},{value:"Channels",id:"channels",level:3},{value:"Create  a channel and send message to channel",id:"create--a-channel-and-send-message-to-channel",level:4},{value:"Invite friend join your channel",id:"invite-friend-join-your-channel",level:4},{value:"Query channels",id:"query-channels",level:4},{value:"Messages",id:"messages",level:3},{value:"Receive new messages",id:"receive-new-messages",level:4},{value:"Query the history of messages in a channel",id:"query-the-history-of-messages-in-a-channel",level:4},{value:"Notification",id:"notification",level:3},{value:"Receive new notification",id:"receive-new-notification",level:4}],u={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"web3mq-tutorial"},"Web3MQ Tutorial"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},'This tutorial walks you through the key concepts of Web3MQ using a sample react project and successfully\nsend your first "hello world" to your friend!')),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Install Web3MQ's JS SDK using a package manager of your choice")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @web3mq/client\nor\nyarn add @web3mq/client\n")),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("h3",{id:"initialize-client"},"Initialize Client"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Initialize Client and Connect to Web3MQ Network")),(0,s.kt)("p",null,"In order to connect to the Web3MQ Network, both users and developers authenticate through wallet signatures, we\ndemonstrate below with an Ethereum wallet via Metamask, but Web3MQ is built to be compatible with wallets across\ndifferent chains."),(0,s.kt)("h4",{id:"initialize-client-and-connect-to-web3mq-network"},"Initialize Client and Connect to Web3MQ Network"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"While we are committed to building an open and collectively owned public good, our early stage testnet requires an API\nkey in order to connect. This is to control capacity to make sure that each early partner and developer is able to build\na great experience on top of Web3MQ. ",(0,s.kt)("a",{parentName:"p",href:"https://web3mq.com/apply"},"Apply here"),"."))),(0,s.kt)("p",null,"As Web3MQ is a federated network, our default JS SDK client has a method to help you connect to the best node for you."),(0,s.kt)("p",null,"Simply calling Client.init without connectUrl or an empty string returns a url of the best node determined for you, and\nthis url can be stored locally."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import {Client} from '@web3mq/client';\n\n// You can save the bestEndpointUrl locally to skip endpoint search next time, which will save time, and\nconst bestEndpointUrl = await Client.init({\n    connectUrl: '', //\n    app_key: 'app_key', // temporary authorization key obtained by applying, will be removed in future testnets and mainnet\n});\n")),(0,s.kt)("p",null,"Calling Client.init with a specific connectUrl forces the client to connect to that specific node. When bestEndpointUrl\nis stored, it might be time-saving to connect directly instead of running the search again."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import {Client} from '@web3mq/client';\n\nconst fastUrl = await Client.init({\n    connectUrl: bestEndpointUrl, // takes in a valid endpoint url as input, when this paramter is given, client will always connect to that specific node.\n    app_key: 'app_key', // Appkey applied from our team\n});\n")),(0,s.kt)("h4",{id:"api-endpoints"},"API endpoints"),(0,s.kt)("p",null,"During this initial testing phase, we've hosted complete networks of Web3MQ nodes in different regions around the globe.\nConnect to these endpoints below, to access the Web3MQ Testnet."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-1.web3mq.com"},"https://testnet-us-west-1-1.web3mq.com")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-2.web3mq.com"},"https://testnet-us-west-1-2.web3mq.com")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-1.web3mq.com"},"https://testnet-ap-jp-1.web3mq.com")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-2.web3mq.com"},"https://testnet-ap-jp-2.web3mq.com")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-1.web3mq.com"},"https://testnet-ap-singapore-1.web3mq.com")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-2.web3mq.com"},"https://testnet-ap-singapore-2.web3mq.com"))),(0,s.kt)("h3",{id:"register-user"},"Register User"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Sign with wallet to register user and obtain message encryption keys")),(0,s.kt)("p",null,"For any first-time user of Web3MQ's network, you'll need to register on Web3MQ's network. "),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Call the Client.init() to initialize your network")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'import React, { useEffect, useState } from "react";\nimport { Client } from "@web3mq/client";\nconst fastUrl = await Client.init({\n    connectUrl: \'\',\n    app_key: "APP_KEY",\n});\n')),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"For your convenience, custom methods can be used to get user information"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'const getAccount = async (didType: WalletType = "eth") => {\nconst {address} = await Client.register.getAccount(didType);\nconst {userid, userExist} = await Client.register.getUserInfo({\n    did_value: address,\n    did_type: didType,\n});\nreturn {\n    address,\n    userid,\n    userExist,\n};\n};\n\n')),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"You need to first generate a main key pair based on your custom password encryption, this secret key pair has the highest authority over your web3mq account, so you need to keep it very safe")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const walletType = 'eth' | 'starknet'\nconst password = '123456'\nconst {address, userid } = await getAccount()\nconst {signContent: keysSignContent} = await Client.register.getMainKeypairSignContent({\n    password,\n    did_value: address,\n    did_type: walletType,\n});\nconst {sign: keysSignature} = await Client.register.sign(keysSignContent, address, walletType);\nconst {publicKey, secretKey} = await Client.register.getMainKeypairBySignature(\n    keysSignature,\n    password\n);\n")),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"After generating the secret key pair, you need to sign with the public key and the wallet to complete the registration")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const {signContent} = await Client.register.getRegisterSignContent({\n    userid,\n    mainPublicKey: publicKey,\n    didType: walletType,\n    didValue: address,\n});\nconst {sign: signature, publicKey: did_pubkey = ''} = await Client.register.sign(\n    signContent,\n    address,\n    walletType\n);\nconst params = {\n    userid,\n    didValue: address,\n    mainPublicKey: publicKey,\n    did_pubkey,\n    didType: walletType,\n    nickname: '',\n    avatar_url: '',\n    signature,\n}\nconst registerRes = await Client.register.register(params);\n// register success\n")),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"After successful registration, you can get a pair of temporary keys with the secret key pair you just generated and the password, this pair of keys is to allow you to login to the Web3MQ network more securely and quickly")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"// login func\nconst {\n    tempPrivateKey,\n    tempPublicKey,\n    pubkeyExpiredTimestamp,\n    mainPrivateKey,\n    mainPublicKey,\n} = await Client.register.login({\n    password,\n    mainPublicKey: publicKey,\n    mainPrivateKey: secretKey,\n    userid,\n    didType: walletType,\n    didValue: address,\n})\n")),(0,s.kt)("h3",{id:"get-client-instance"},"Get client instance"),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Before that, let's take a look at the parameters of Client.init(), ",(0,s.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/types/#initoptions"},"InitOptions"),", two parameters that need special attention, "),(0,s.kt)("ol",{parentName:"div"},(0,s.kt)("li",{parentName:"ol"},"didKey  (Format\uff1awalletType:walletAddress  eg:   eth:0x00000000000)"),(0,s.kt)("li",{parentName:"ol"},"tempPubkey  ( The temporary public key returned to you after a successful login )")),(0,s.kt)("p",{parentName:"div"},"These two parameters ensure that your web3mq client is online, so after you have successfully logged in, you will need to pass this parameter every time you call the init method"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'import {Client} from "@web3mq/client";\n\nawait Client.init({\n    connectUrl: \'\',\n    app_key: "APP_KEY", // your Appkey\n    didKey: `${walletType}:${address}`,\n    tempPubkey: tempPublicKey,\n})\nconst client = Client.getInstance({\n    PrivateKey: tempPrivateKey,\n    PublicKey: tempPublicKey,\n    userid\n})\n')),(0,s.kt)("h3",{id:"events"},"Events"),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The web3mq sdk data interaction is done through event posting and listening, which allows you to update data more elegantly "),(0,s.kt)("p",{parentName:"div"},"see: ",(0,s.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/eventCenter"},"Event center")))),(0,s.kt)("h3",{id:"send-message"},"Send message"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"send a message to a user")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const handleEvent = (event: any) => {\n    console.log(event)\n}\nconst client = Client.getInstance(keys);\n//  After the message has been sent, the latest message sent can be retrieved in this event callback\nclient.on('message.send', handleEvent)\n// After the message has been sent successfully, the latest message sent can be retrieved in this event callback\nclient.on('message.delivered', handleEvent)\nconst address =  '0x1111111'\nawait client.message.sendMessage('hello world', address)\n\n")),(0,s.kt)("h3",{id:"channels"},"Channels"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Usually a conversation in web3mq is between two or more wallets")),(0,s.kt)("h4",{id:"create--a-channel-and-send-message-to-channel"},"Create  a channel and send message to channel"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const handleEvent = (event: any) => {\n    console.log(event)\n    const { channelList, activeChannel } = client.channel;\n    if (!channelList) {\n      return;\n    }\n    // set active channel\n    client.channel.setActiveChannel(channelList[0])\n    // send message to channel\n    client.message.sendMessage('hello channel');\n}\nconst client = Client.getInstance(keys);\n// Once the channel has been created, the latest channel created can be retrieved in the event callback\nclient.on('channel.getList', handleEvent)\nconst chatRoomName = ''\nawait client.channel.createRoom({\n    group_name: chatRoomName || 'default room',\n})\n")),(0,s.kt)("h4",{id:"invite-friend-join-your-channel"},"Invite friend join your channel"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const handleEvent = (event: any) => {\n    console.log(event)\n    const { channelList, activeChannel } = client.channel;\n    if (!channelList) {\n      return;\n    }\n    // set active channel\n    client.channel.setActiveChannel(channelList[0])\n    // send message to channel\n    client.message.sendMessage('hello channel');\n}\nconst client = Client.getInstance(keys);\nconst channel = {} // your create channel obj  \nawait client.channel.setActiveChannel(channel);\nconst ids = [\n    'web3mq userid1',\n    'web3mq userid2',\n]\nawait client.channel.inviteGroupMember(ids);\n")),(0,s.kt)("h4",{id:"query-channels"},"Query channels"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Query the channels you have created or joined, including the addresses you have chatted with")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const handleEvent = (props: { type: EventTypes }) => {\n    console.log(event)\n    if (props.type === 'channel.getList') {\n        const { channelList, activeChannel } = client.channel;\n        console.log('your channel list:', channelList)\n    }\n}\nconst client = Client.getInstance(keys);\n// Call queryChannels func \uff0cYou can get the latest channel list in the event callback\nclient.on('channel.getList', handleEvent)\nawait client.channel.queryChannels({\n    page: 1,\n    size: 20\n})\n")),(0,s.kt)("h3",{id:"messages"},"Messages"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Messages usually come from group chats or 1v1")),(0,s.kt)("h4",{id:"receive-new-messages"},"Receive new messages"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"We use the ",(0,s.kt)("inlineCode",{parentName:"p"},"message.delivered")," event to get a listener to see if someone sends you a new message")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const handleEvent = (event: any) => {\n    console.log(event)\n    if (event.type === 'message.delivered') {\n        const { messageList } = client.message;\n        console.log(messageList)\n    }\n}\nconst client = Client.getInstance(keys);\n// After the message has been sent successfully, the latest message sent can be retrieved in this event callback\nclient.on('message.delivered', handleEvent)\n")),(0,s.kt)("h4",{id:"query-the-history-of-messages-in-a-channel"},"Query the history of messages in a channel"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The source of the message is usually a chat or an address")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"\nconst handleEvent = (props: { type: EventTypes }) => {\n    console.log(event)\n    if (props.type === 'message.getList') {\n        const { messageList } = client.message;\n        console.log('message list:', messageList)\n    }\n}\nconst client = Client.getInstance(keys);\n// Call getMessageList func \uff0cYou can get the latest message list in the event callback\nclient.on('channel.getList', handleEvent)\nconst channelId = 'web3mquserid' | 'chat id'\nawait await client.message.getMessageList({\n    page: 1, size: 20\n}, channelId);\n")),(0,s.kt)("h3",{id:"notification"},"Notification"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Generally notifications are received passively, we can also actively send some notifications to the address, such as requesting a follow, or pushing some notifications to your followers")),(0,s.kt)("h4",{id:"receive-new-notification"},"Receive new notification"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"notification.getList")," event is fired when a new notification is available")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const handleEvent = (event: any) => {\n    console.log(event)\n    if (event.type === 'notification.getList') {\n        const { notificationList } = client.notify;\n        console.log(notificationList)\n    }\n}\nconst client = Client.getInstance(keys);\n// After the message has been sent successfully, the latest message sent can be retrieved in this event callback\nclient.on('notification.getList', handleEvent)\n")))}m.isMDXComponent=!0}}]);