"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[111],{3905:function(n,e,t){t.d(e,{Zo:function(){return m},kt:function(){return l}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=r.createContext({}),u=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},m=function(n){var e=u(n.components);return r.createElement(i.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,i=n.parentName,m=s(n,["components","mdxType","originalType","parentName"]),p=u(t),l=o,f=p["".concat(i,".").concat(l)]||p[l]||d[l]||a;return t?r.createElement(f,c(c({ref:e},m),{},{components:t})):r.createElement(f,c({ref:e},m))}));function l(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,c=new Array(a);c[0]=p;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=n,s.mdxType="string"==typeof n?n:o,c[1]=s;for(var u=2;u<a;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5557:function(n,e,t){t.r(e),t.d(e,{assets:function(){return m},contentTitle:function(){return i},default:function(){return l},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],s={title:"5. Send Connect Command",order:6,group:{title:"Quickstart"}},i="Send Connect Command",u={unversionedId:"Web3MQ-API/quickstart/Send_Connect_Command",id:"Web3MQ-API/quickstart/Send_Connect_Command",title:"5. Send Connect Command",description:"use Web3MQ JSSDK or build protobuf yourself",source:"@site/docs/Web3MQ-API/quickstart/Send_Connect_Command.md",sourceDirName:"Web3MQ-API/quickstart",slug:"/Web3MQ-API/quickstart/Send_Connect_Command",permalink:"/docs/Web3MQ-API/quickstart/Send_Connect_Command",tags:[],version:"current",frontMatter:{title:"5. Send Connect Command",order:6,group:{title:"Quickstart"}},sidebar:"tutorialSidebar",previous:{title:"4. Create group",permalink:"/docs/Web3MQ-API/quickstart/Create_group"},next:{title:"6. Send a message",permalink:"/docs/Web3MQ-API/quickstart/Send_message_in_Group"}},m={},d=[],p={toc:d};function l(n){var e=n.components,t=(0,o.Z)(n,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"send-connect-command"},"Send Connect Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'syntax = "proto3";\n\n// msgSign = Ed25519 signing(nodeId + userId + timestamp)\nmessage ConnectCommand {\n    string nodeId = 1;\n    string userId = 2;\n    uint64 timestamp = 3;\n    string msgSign = 4;\n}\n')),(0,a.kt)("p",null,"use ",(0,a.kt)("inlineCode",{parentName:"p"},"Web3MQ JSSDK")," or build protobuf yourself"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// pb/connect build from protobuf file\nimport { ConnectCommand } from 'pb/connect';\n\nconst WS_PROTOCOL = 'wss'; // ws or wss\n\nconst HostURL = 'us-west-2.web3mq.com'; // choose one domain\n\nconst GetWSConn = () => {\n  const wsurl = WS_PROTOCOL + '://' + HostURL + '/messages';\n  const wsconn = new WebSocket(wsurl);\n  wsconn.binaryType = 'arraybuffer'; // !important Web3MQ send message use protobuf\n  return wsconn;\n};\n\nconst GetContactBytes = (command: any, bytes: Uint8Array) => {\n  // client category type\n  const categoryType = 10;\n  const concatArray = new Uint8Array([categoryType, command, ...bytes]);\n\n  return concatArray;\n};\n\n\n// connect command type\nconst PbTypeConnectReqCommand = 0b00000010;\n\n// signature = ed25519 private key signing(nodeId + userId + timestamp)\nlet reqCmd: ConnectCommand = {\n  nodeId: nodeId,\n  userId: userId,\n  timestamp: ts,\n  msgSign: signature,\n};\n\nlet bytes = ConnectCommand.toBinary(reqCmd);\nwsconn.send(concatArray);\n")))}l.isMDXComponent=!0}}]);