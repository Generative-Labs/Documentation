"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[7178],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),g=p(n),u=r,m=g["".concat(l,".").concat(u)]||g[u]||c[u]||i;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5016:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],o={position:2},l="Register",p={unversionedId:"Web3MQ-SDK/JS-SDK/auth/auth",id:"Web3MQ-SDK/JS-SDK/auth/auth",title:"Register",description:"Methods",source:"@site/docs/Web3MQ-SDK/JS-SDK/auth/context.md",sourceDirName:"Web3MQ-SDK/JS-SDK/auth",slug:"/Web3MQ-SDK/JS-SDK/auth/",permalink:"/docs/Web3MQ-SDK/JS-SDK/auth/",tags:[],version:"current",frontMatter:{position:2},sidebar:"tutorialSidebar",previous:{title:"DappConnect",permalink:"/docs/Web3MQ-SDK/JS-SDK/dappConnect/"},next:{title:"Channel",permalink:"/docs/Web3MQ-SDK/JS-SDK/channel/"}},d={},c=[{value:"Methods",id:"methods",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Methods",id:"methods-1",level:2},{value:"getAccount()",id:"getaccount",level:3},{value:"getUserInfo()",id:"getuserinfo",level:3},{value:"sign()",id:"sign",level:3},{value:"getMainKeypairSignContent()",id:"getmainkeypairsigncontent",level:3},{value:"getMainKeypairBySignature()",id:"getmainkeypairbysignature",level:3},{value:"getRegisterSignContent()",id:"getregistersigncontent",level:3},{value:"auth() or resetPassword()",id:"auth-or-resetpassword",level:3},{value:"login()",id:"login",level:3}],g={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"register"},"Register"),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"name"),(0,i.kt)("th",{parentName:"tr",align:null},"type"),(0,i.kt)("th",{parentName:"tr",align:null},"Parameters Description"),(0,i.kt)("th",{parentName:"tr",align:null},"response"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getAccount"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#wallettype"},"WalletType")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#accounttype"},"AccountType"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getUserInfo"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#getuserinfoparams"},"getUserInfoParams")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#getuserinforesponse"},"GetUserInfoResponse"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"register"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#registerbysignparams"},"RegisterBySignParams")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#registerapiresponse"},"RegisterApiResponse"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"login"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#loginbykeysparams"},"LoginByKeysParams")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#loginresponse"},"LoginResponse"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"resetPassword"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#registerbysignparams"},"RegisterBySignParams")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#registerapiresponse"},"RegisterApiResponse"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sign"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},"1, signContent: string 2. address: string 3. walletType:",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#wallettype"},"WalletType")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#walletsignres"},"WalletSignResponse"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getMainKeypairSignContent"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#getmainkeypairparams"},"GetMainKeypairParams")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#getsigncontentresponse"},"GetSignContentResponse"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getMainKeypairBySignature"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},"1. signature: string, 2. password: string"),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#mainkeypairtype"},"MainKeypairType"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"getRegisterSignContent"),(0,i.kt)("td",{parentName:"tr",align:null},"function"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#getregistersigncontentparams"},"GetRegisterSignContentParams")),(0,i.kt)("td",{parentName:"tr",align:null},"Promise: ",(0,i.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#getsigncontentresponse"},"GetSignContentResponse"))))),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"init() see: ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/client/#init"},"init"))),(0,i.kt)("h2",{id:"methods-1"},"Methods"),(0,i.kt)("h3",{id:"getaccount"},"getAccount()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Get the wallet address after connecting to the wallet")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import {Client} from "@web3mq/client";\n\nconst didKey = localStorage.getItem("DID_KEY") || "";\nconst tempPubkey = localStorage.getItem("PUBLIC_KEY") || "";\nawait Client.init({\n    connectUrl: localStorage.getItem("FAST_URL"), // or \'\'\n    app_key: "vAUJTFXbBZRkEDRE", // your Appkey\n    env: "dev",\n    didKey,\n    tempPubkey,\n});\n\nconst didType = "eth" | "starknet";\nlet {address} = await Client.auth.getAccount(didType);\n\nconsole.log(address);\n')),(0,i.kt)("h3",{id:"getuserinfo"},"getUserInfo()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Checking the existence of a user by wallet address")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import {Client} from "@web3mq/client";\n\nconst didKey = localStorage.getItem("DID_KEY") || "";\nconst tempPubkey = localStorage.getItem("PUBLIC_KEY") || "";\n\nawait Client.init({\n    connectUrl: localStorage.getItem("FAST_URL"), // or \'\'\n    app_key: "vAUJTFXbBZRkEDRE", // your Appkey\n    env: "dev",\n    didKey,\n    tempPubkey,\n});\nconst {userid, userExist} = await Client.auth.getUserInfo({\n    did_value: address, //\n    did_type: didType,\n});\n\n// userid: string  eg: user:0000000\n// userExist: true or false\n\nconsole.log(userid, userExist);\n')),(0,i.kt)("h3",{id:"sign"},"sign()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"call wallet sign")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'\nimport {Client} from "@web3mq/client";\n\nawait Client.init({\n    connectUrl: "example url", // The fastURL you saved to local\n    app_key: "app_key", // Appkey applied from our team\n    env: "test", // The default is the test environment\n    tempPubkey, // After login get temp public key\n    didKey, // did_key:did_value  eg: eth:0x00000000123123;\n});\nconst walletType = "eth" | "starknet";\nconst {address} = await Client.auth.getAccount(walletType);\nconst signContent = \'hello web3mq\'\nconst {sign: signature} = await this.sign(signContent, did_value, did_type);\n')),(0,i.kt)("h3",{id:"getmainkeypairsigncontent"},"getMainKeypairSignContent()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Get the signature content to generate the master key pair")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import {Client} from "@web3mq/client";\n\nawait Client.init({\n    connectUrl: "example url", // The fastURL you saved to local\n    app_key: "app_key", // Appkey applied from our team\n    env: "test", // The default is the test environment\n    tempPubkey, // After login get temp public key\n    didKey, // did_key:did_value  eg: eth:0x00000000123123;\n});\nconst walletType = "eth" | "starknet";\nconst {address} = await Client.auth.getAccount(walletType);\n// 1. get signContent\nconst {signContent} = await Client.auth.getMainKeypairSignContent({\n    password: confirmPassword.current,\n    did_value: address,\n    did_type: walletType,\n});\nconsole.log(signContent);\n// 2. sign \nconst {sign: signature} = await this.sign(signContent, did_value, did_type);\nconsole.log(signature)\n')),(0,i.kt)("h3",{id:"getmainkeypairbysignature"},"getMainKeypairBySignature()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Get the master key pair after signing")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import {Client} from "@web3mq/client";\n\nconst didKey = localStorage.getItem("DID_KEY") || "";\nconst tempPubkey = localStorage.getItem("PUBLIC_KEY") || "";\n\nawait Client.init({\n    connectUrl: localStorage.getItem("FAST_URL"), // or \'\'\n    app_key: "vAUJTFXbBZRkEDRE", // your Appkey\n    env: "dev",\n    didKey,\n    tempPubkey,\n});\n\nconst signature = "sign res by mainkeys signContent";\nconst password = \'123456\';\nconst {publicKey, secretKey} = await Client.auth.getMainKeypairBySignature(\n    signature,\n    password\n);\n')),(0,i.kt)("h3",{id:"getregistersigncontent"},"getRegisterSignContent()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Get the auth signContent")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'\nimport {Client} from "@web3mq/client";\n\nconst didKey = localStorage.getItem("DID_KEY") || "";\nconst tempPubkey = localStorage.getItem("PUBLIC_KEY") || "";\nawait Client.init({\n    connectUrl: localStorage.getItem("FAST_URL"), // or \'\'\n    app_key: "vAUJTFXbBZRkEDRE", // your Appkey\n    env: "dev",\n    didKey,\n    tempPubkey,\n});\nconst didType = \'eth\' | \'starknet\'\nconst getAccount = async (didType: WalletType = "eth") => {\n    const {address} = await Client.auth.getAccount(didType);\n    const {userid, userExist} = await Client.auth.getUserInfo({\n        did_value: address,\n        did_type: didType,\n    });\n    return {\n        address,\n        userid,\n        userExist,\n    };\n};\n\nconst {address, userid} = await getAccount(didType);\n\nconst {signContent} = await Client.auth.getRegisterSignContent({\n    userid,\n    mainPublicKey: publicKey,\n    didType,\n    didValue: address,\n});\nauth()\n')),(0,i.kt)("h3",{id:"auth-or-resetpassword"},"auth() or resetPassword()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Registering users via wallet address")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Before registering a user, you must auth the main key pair with a custom password,\nMain key pair has the highest authority over your account,\nso make sure you keep it safe"))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Using a mobile wallet? see: ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/dappConnect/"},"dapp connect")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import {Client} from "@web3mq/client";\n\nconst didKey = localStorage.getItem("DID_KEY") || "";\nconst tempPubkey = localStorage.getItem("PUBLIC_KEY") || "";\nawait Client.init({\n    connectUrl: localStorage.getItem("FAST_URL"), // or \'\'\n    app_key: "vAUJTFXbBZRkEDRE", // your Appkey\n    env: "dev",\n    didKey,\n    tempPubkey,\n});\n\nconst getAccount = async (didType: WalletType = "eth") => {\n    const {address} = await Client.auth.getAccount(didType);\n    const {userid, userExist} = await Client.auth.getUserInfo({\n        did_value: address,\n        did_type: didType,\n    });\n    return {\n        address,\n        userid,\n        userExist,\n    };\n};\n\nconst auth = async (password: string, didType: WalletType = "eth") => {\n    const {address, userid} = await getAccount(didType);\n    const {password, did_value, did_type} = options;\n    const {signContent: keysSignContent} = await Client.auth.getMainKeypairSignContent(options);\n    const {sign: keysSignature} = await Client.auth.sign(keysSignContent, did_value, did_type);\n    const {publicKey, secretKey} = await Client.auth.getMainKeypairBySignature(\n        keysSignature,\n        password\n    );\n\n    // const registerSignContent = aw Client.auth.\n    const {signContent} = await Client.auth.getRegisterSignContent({\n        userid,\n        mainPublicKey: publicKey,\n        didType,\n        didValue: address,\n    });\n    const {sign: signature, publicKey: did_pubkey = \'\'} = await Client.auth.sign(\n        signContent,\n        address,\n        didType,\n    );\n   \n   const params = {\n      userid,\n      didValue: address,\n      mainPublicKey: publicKey,\n      did_pubkey,\n      didType,\n      nickname: \'\',\n      avatar_url: \'\',\n      signature,\n   }\n    const registerRes = await Client.auth.auth(params);\n   // reset password\n   // const resetRes = await Client.auth.resetPassword(params);\n    console.log(registerRes)\n};\nauth()\n\n')),(0,i.kt)("h3",{id:"login"},"login()"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Login")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Two pairs of secret key pairs are returned after login"),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Main secret key pairs"),(0,i.kt)("p",{parentName:"li"},"Same as the public-private key pair returned after registration, please keep it safe")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Temp secret key pairs"),(0,i.kt)("p",{parentName:"li"},"A temporary public-private key pair with an expiry time that marks whether the user is online or not"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'import {Client} from "@web3mq/client";\n\nconst didKey = localStorage.getItem("DID_KEY") || "";\nconst tempPubkey = localStorage.getItem("PUBLIC_KEY") || "";\nawait Client.init({\n    connectUrl: localStorage.getItem("FAST_URL"), // or \'\'\n    app_key: "vAUJTFXbBZRkEDRE", // your Appkey\n    env: "dev",\n    didKey,\n    tempPubkey,\n});\n\nconst getAccount = async (didType: WalletType = "eth") => {\n    const {address} = await Client.auth.getAccount(didType);\n    const {userid, userExist} = await Client.auth.getUserInfo({\n        did_value: address,\n        did_type: didType,\n    });\n    return {\n        address,\n        userid,\n        userExist,\n    };\n};\n\nconst login = async (password: string, didType: WalletType = "eth") => {\n    const {address, userid} = await getAccount(didType);\n\n    // The public-private key pair returned after registration\n    const localMainPrivateKey = localStorage.getItem(\'MAIN_PRIVATE_KEY\') || "";\n    const localMainPublicKey = localStorage.getItem(\'MAIN_PUBLIC_KEY\') || "";\n    const tempTime = localStorage.getItem(\'PUBKEY_EXPIRED_TIMESTAMP\') || 0;\n    if (!localMainPublicKey || localMainPrivateKeyak) {\n        const {signContent} = await Client.auth.getMainKeypairSignContent(options);\n        const {sign: signature, publicKey: did_pubkey} = await Client.auth.sign(signContent, did_value, did_type);\n        const {\n            publicKey: localMainPublicKey,\n            secretKey: localMainPrivateKeyak\n        } = await Client.auth.getMainKeypairBySignature(\n            signature,\n            password\n        );\n    }\n\n    const {\n        tempPrivateKey,\n        tempPublicKey,\n        pubkeyExpiredTimestamp,\n        mainPrivateKey,\n        mainPublicKey\n    } = await Client.auth.login({\n        mainPrivateKey: localMainPrivateKey,\n        mainPublicKey: localMainPublicKey,\n        didType,\n        didValue: address,\n        userid,\n        password,\n        pubkeyExpiredTimestamp: tempTime\n    });\n\n    //\n    localStorage.setItem("PRIVATE_KEY", TempPrivateKey);\n    localStorage.setItem("PUBLIC_KEY", TempPublicKey);\n    localStorage.setItem(\'MAIN_PRIVATE_KEY\', mainPrivateKey);\n    localStorage.setItem(\'MAIN_PUBLIC_KEY\', mainPublicKey);\n    localStorage.setItem(`DID_KEY`, `${didType}:${address}`);\n    localStorage.setItem(\n        "PUBKEY_EXPIRED_TIMESTAMP",\n        String(pubkeyExpiredTimestamp)\n    );\n};\n')))}u.isMDXComponent=!0}}]);