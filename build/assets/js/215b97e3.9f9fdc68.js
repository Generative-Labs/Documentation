"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[491],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return d}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,g=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return r?t.createElement(g,s(s({ref:n},u),{},{components:r})):t.createElement(g,s({ref:n},u))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5183:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var t=r(7462),a=r(3366),o=(r(7294),r(3905)),s=["components"],i={sidebar_position:3},c="Login",l={unversionedId:"Web3MQ-SDK/Python-SDK/login",id:"Web3MQ-SDK/Python-SDK/login",title:"Login",description:"Get User's Random login Secret",source:"@site/docs/Web3MQ-SDK/Python-SDK/login.md",sourceDirName:"Web3MQ-SDK/Python-SDK",slug:"/Web3MQ-SDK/Python-SDK/login",permalink:"/docs/Web3MQ-SDK/Python-SDK/login",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Register",permalink:"/docs/Web3MQ-SDK/Python-SDK/register"},next:{title:"User",permalink:"/docs/Web3MQ-SDK/Python-SDK/userapi"}},u={},m=[{value:"Get User&#39;s Random login Secret",id:"get-users-random-login-secret",level:2},{value:"Login",id:"login-1",level:2}],p={toc:m};function d(e){var n=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"login"},"Login"),(0,o.kt)("h2",{id:"get-users-random-login-secret"},"Get User's Random login Secret"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from web3mq.client import Web3mqClient\n\nclient = Web3mqClient()\n\nwallet_address = "your wallet address"\n\nlogin_random_secret = client.login_random_secret(wallet_address)\n')),(0,o.kt)("h2",{id:"login-1"},"Login"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from web3mq.client import Web3mqClient\n\nclient = Web3mqClient()\n\n#  User\'s login random secret, get it from get_login_random_secret function\nlogin_random_secret = "login random secret"\nwallet_address = "your wallet address"\n\n# Generated by MetaMask-Sign with user\'s random login secret\nsignature = "signature"\n\nresult = client.do_login(login_random_secret, signature, wallet_address)\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"result example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "access_token": "your access token",\n    "user_info": {\n        "user_id": "user\'s OID",\n        "nick_name": "user\'s nick_name",\n        "twitter_username": "user\'s twitter_username",\n        "twitter_avatar": "user\'s twitter_avatar",\n        "instagram_username": "user\'s instagram_username",\n        "instagram_avatar": "user\'s instagram_avatar",\n        "facebook_username": "user\'s facebook_username",\n        "facebook_avatar": "user\'s facebook_avatar",\n        "discord_username": "user\'s discord_username",\n        "discord_avatar": "user\'s discord_avatar",\n        "opensea_username": "user\'s opensea_username",\n        "opensea_avatar": "user\'s opensea_avatar",\n        "eth_wallet_address": "user\'s eth_wallet_address",\n        "ens_name": "user\'s ens_name",\n        "status": "user\'s status",\n        "created_at": "the timestamp when user created"\n    }\n}\n')))}d.isMDXComponent=!0}}]);