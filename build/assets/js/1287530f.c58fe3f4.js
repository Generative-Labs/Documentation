"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[6362],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var s=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,s,n=function(e,t){if(null==e)return{};var a,s,n={},r=Object.keys(e);for(s=0;s<r.length;s++)a=r[s],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)a=r[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var g=s.createContext({}),o=function(e){var t=s.useContext(g),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=o(e.components);return s.createElement(g.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},c=s.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,g=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=o(a),u=n,m=c["".concat(g,".").concat(u)]||c[u]||p[u]||r;return a?s.createElement(m,i(i({ref:t},d),{},{components:a})):s.createElement(m,i({ref:t},d))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=c;var l={};for(var g in t)hasOwnProperty.call(t,g)&&(l[g]=t[g]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var o=2;o<r;o++)i[o]=a[o];return s.createElement.apply(null,i)}return s.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4858:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return g},default:function(){return u},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p}});var s=a(7462),n=a(3366),r=(a(7294),a(3905)),i=["components"],l={position:4},g="Messages",o={unversionedId:"Web3MQ-SDK/Swift-SDK/Messages/Messages",id:"Web3MQ-SDK/Swift-SDK/Messages/Messages",title:"Messages",description:"Methods",source:"@site/docs/Web3MQ-SDK/Swift-SDK/Messages/Messages.md",sourceDirName:"Web3MQ-SDK/Swift-SDK/Messages",slug:"/Web3MQ-SDK/Swift-SDK/Messages/",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Messages/",tags:[],version:"current",frontMatter:{position:4},sidebar:"tutorialSidebar",previous:{title:"Channels",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Channels/"},next:{title:"Contact",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Contacts/"}},d={},p=[{value:"Methods",id:"methods",level:2},{value:"Sending Messages",id:"sending-messages",level:2},{value:"Text Message",id:"text-message",level:3},{value:"Custom Message",id:"custom-message",level:3},{value:"Receiving Message",id:"receiving-message",level:2},{value:"Updating Message Status",id:"updating-message-status",level:2},{value:"Searching Messages",id:"searching-messages",level:2},{value:"Searching Messages in Sandbox Database",id:"searching-messages-in-sandbox-database",level:3},{value:"Searching Messages in Remote Server",id:"searching-messages-in-remote-server",level:3},{value:"Bridge Message",id:"bridge-message",level:2},{value:"Handling Bridge Message",id:"handling-bridge-message",level:3},{value:"Sending Bridge Message",id:"sending-bridge-message",level:3}],c={toc:p};function u(e){var t=e.components,a=(0,n.Z)(e,i);return(0,r.kt)("wrapper",(0,s.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"messages"},"Messages"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Response"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"localMessages"),(0,r.kt)("td",{parentName:"tr",align:null},"sessionId: String, page: Int, size: Int"),(0,r.kt)("td",{parentName:"tr",align:null},"messages: ",(0,r.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/Swift-SDK/Structs/#Message"},"Message"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"messages"),(0,r.kt)("td",{parentName:"tr",align:null},"sessionId: String, page: Int, size: Int"),(0,r.kt)("td",{parentName:"tr",align:null},"messages: ",(0,r.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/Swift-SDK/Structs/#Message"},"Message"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sendMessage"),(0,r.kt)("td",{parentName:"tr",align:null},"text: String, sessionId: String"),(0,r.kt)("td",{parentName:"tr",align:null},"messageId: String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"updateMessageStatus"),(0,r.kt)("td",{parentName:"tr",align:null},"messages: ","[String]",", sessionId: String, status: ",(0,r.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/Swift-SDK/Structs/#MessageStatus"},"MessageStatus")),(0,r.kt)("td",{parentName:"tr",align:null},"success: Bool")))),(0,r.kt)("h2",{id:"sending-messages"},"Sending Messages"),(0,r.kt)("h3",{id:"text-message"},"Text Message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'try await Client.shared.messageManager.sendMessage("{text}", topicId: "{TopicId}") \n')),(0,r.kt)("h3",{id:"custom-message"},"Custom Message"),(0,r.kt)("p",null,"Web3MQ supports custom message payload, which makes it possible to support complex business scenarios"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'try await Client.shared.messageManager.sendMessage(data, topicId: "{TopicId}") \n')),(0,r.kt)("h2",{id:"receiving-message"},"Receiving Message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"Client.shared.messageManager.messagePublisher.sink { message in \n\n}\n")),(0,r.kt)("h2",{id:"updating-message-status"},"Updating Message Status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'Client.shared.messageManager.updateMessageStatus(["{MessageId}"], status: .read)\n')),(0,r.kt)("h2",{id:"searching-messages"},"Searching Messages"),(0,r.kt)("h3",{id:"searching-messages-in-sandbox-database"},"Searching Messages in Sandbox Database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let messages: [Message] = await Client.shared.messageManager.localMessages(topicId: "{TopicId}", page: 0, size: 20)\n')),(0,r.kt)("h3",{id:"searching-messages-in-remote-server"},"Searching Messages in Remote Server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let messages: [Message] = await Client.shared.messageManager.messages(topicId: "{TopicId}", page: 0, size: 20)\n')),(0,r.kt)("h2",{id:"bridge-message"},"Bridge Message"),(0,r.kt)("p",null,"Bridge Message is a special message that allows you to receive messages sent by\nyou on other client side. There are two types of Bridge Message: ",(0,r.kt)("inlineCode",{parentName:"p"},"dapp_bridge")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wallet_bridge"),". Currently, the default mobile client can receive messages of type ",(0,r.kt)("inlineCode",{parentName:"p"},"dapp_bridge"),", while the web client can receive messages of type ",(0,r.kt)("inlineCode",{parentName:"p"},"dapp_bridge"),"."),(0,r.kt)("h3",{id:"handling-bridge-message"},"Handling Bridge Message"),(0,r.kt)("p",null,"You can respond to Bridge Messages by registering a ",(0,r.kt)("inlineCode",{parentName:"p"},"BridgeEventHandler")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"BridgeManager"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"Client.shared.bridgeMessage.registerHandlers(_ bridgeEventHandlers: [BridgeEventHandler]) \n")),(0,r.kt)("h3",{id:"sending-bridge-message"},"Sending Bridge Message"),(0,r.kt)("p",null,"After the BridgeEventHandler has processed the Bridge Message, it can optionally return a message Payload, which will be returned to the sender automatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"public protocol BridgeEventHandler {\n    func shouldHandle(event: Web3MQMessage) -> Bool\n    func handle(event: Web3MQMessage) async -> Data?\n}\n")))}u.isMDXComponent=!0}}]);