"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[2954],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,y=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?r.createElement(y,l(l({ref:t},d),{},{components:n})):r.createElement(y,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6948:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={position:7},l="User",o={unversionedId:"Web3MQ-SDK/JS-SDK/user/user",id:"Web3MQ-SDK/JS-SDK/user/user",title:"User",description:"Methods",source:"@site/docs/Web3MQ-SDK/JS-SDK/user/user.md",sourceDirName:"Web3MQ-SDK/JS-SDK/user",slug:"/Web3MQ-SDK/JS-SDK/user/",permalink:"/docs/Web3MQ-SDK/JS-SDK/user/",draft:!1,tags:[],version:"current",frontMatter:{position:7},sidebar:"tutorialSidebar",previous:{title:"Contact",permalink:"/docs/Web3MQ-SDK/JS-SDK/contact/"},next:{title:"Notify",permalink:"/docs/Web3MQ-SDK/JS-SDK/notify/"}},s={},p=[{value:"Methods",id:"methods",level:2},{value:"init Client",id:"init-client",level:2},{value:"SearchUsers",id:"searchusers",level:2},{value:"GetMyProfile",id:"getmyprofile",level:2},{value:"UpdateMyProfile",id:"updatemyprofile",level:2},{value:"GetUserBindDids",id:"getuserbinddids",level:2},{value:"UserBindDid",id:"userbinddid",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"user"},"User"),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"Parameters Description"),(0,a.kt)("th",{parentName:"tr",align:null},"response"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"searchUsers"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"(walletAddress: string)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#searchusersresponse"},"SearchUsersResponse"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"getMyProfile"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"none"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#searchusersresponse"},"SearchUsersResponse"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"updateMyProfile"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"(nickname: string, avatar_url: string)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#updatemyprofileresponse"},"UpdateMyProfileResponse"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"getUserBindDids"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"none"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"userBindDid"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"( { provider_id: string, did_type: string,did_value: string})"),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("h2",{id:"init-client"},"init Client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n// 1. You must initialize the SDK, the init function is asynchronous\nawait Client.init({\n  connectUrl: 'example url', // The fastURL you saved to local\n  app_key: 'app_key', // Appkey applied from our team\n});\n// 2. sign MetaMask get keys\nconst { PrivateKey, PublicKey, userid } = await Client.register.signMetaMask({\n  signContentURI: 'https://www.web3mq.com', // your signContent URI\n  EthAddress: 'your eth address', // *Not required*  your eth address, if not use your MetaMask eth address\n});\nconst keys = { PrivateKey, PublicKey, userid };\n// 3. You must ensure that the Client.init initialization is complete and that you have a key pair\nconst client = Client.getInstance(keys);\n\nconsole.log(client);\n\nexport const Child = () => {\n  return (\n    <div>\n      <Child client={client} />\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"searchusers"},"SearchUsers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  return (\n    <div>\n      <button\n        onClick={async () => {\n          const data = await client.user.searchUsers('walletAddress');\n          console.log(data);\n        }}>\n        Search Users\n      </button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"getmyprofile"},"GetMyProfile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  return (\n    <div>\n      <button\n        onClick={async () => {\n          const data = await client.user.getMyProfile();\n          console.log(data);\n        }}>\n        Get My Profile\n      </button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"updatemyprofile"},"UpdateMyProfile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  return (\n    <div>\n      <button\n        onClick={async () => {\n          const data = await client.user.updateMyProfile(\n            'nickname',\n            'avatar_url'\n          );\n          console.log(data);\n        }}>\n        Update My Profile\n      </button>\n    </div>\n  );\n};\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"getuserbinddids"},"GetUserBindDids"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  return (\n    <div>\n      <button\n        onClick={async () => {\n          const data = await client.user.getUserBindDids();\n          console.log(data);\n        }}>\n        Get User Bind Dids\n      </button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"userbinddid"},"UserBindDid"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  return (\n    <div>\n      <button\n        onClick={async () => {\n          const data = await client.user.userBindDid({\n            provider_id: 'provider_id',\n            did_type: 'did_type',\n            did_value: 'did_value',\n          });\n          console.log(data);\n        }}>\n        User Bind Did\n      </button>\n    </div>\n  );\n};\n")))}c.isMDXComponent=!0}}]);