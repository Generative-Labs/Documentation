"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[9708],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,c(c({ref:t},u),{},{components:n})):r.createElement(f,c({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3665:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],s={},i="Chat",l={unversionedId:"Web3MQ-SDK/Python-SDK/chat",id:"Web3MQ-SDK/Python-SDK/chat",title:"Chat",description:"How to use it",source:"@site/docs/Web3MQ-SDK/Python-SDK/chat.md",sourceDirName:"Web3MQ-SDK/Python-SDK",slug:"/Web3MQ-SDK/Python-SDK/chat",permalink:"/docs/Web3MQ-SDK/Python-SDK/chat",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Message",permalink:"/docs/Web3MQ-SDK/Python-SDK/messageapi"},next:{title:"Intro",permalink:"/docs/Web3MQ-RESTFul-API/Intro"}},u={},p=[{value:"How to use it",id:"how-to-use-it",level:2},{value:"Usage",id:"usage",level:2},{value:"Connect to server",id:"connect-to-server",level:3},{value:"Send message",id:"send-message",level:3},{value:"On connect",id:"on-connect",level:3},{value:"On message",id:"on-message",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"chat"},"Chat"),(0,a.kt)("h2",{id:"how-to-use-it"},"How to use it"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Get access_token from login function"),(0,a.kt)("li",{parentName:"ul"},"Extract user_id from access_token"),(0,a.kt)("li",{parentName:"ul"},"Connect to server"),(0,a.kt)("li",{parentName:"ul"},"Publish message")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"connect-to-server"},"Connect to server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import paho.mqtt.client as mqtt\n\nCHAT_SERVER_DOMAIN = "msg.web3messaging.online"\n# test env test-msg.web3messaging.online\n\ndef get_chat_client(client_id):\n    mqttc = mqtt.Client(client_id, transport="websockets")\n    return mqttc\n\n# Get access_token from login api response\njwt_data = "access token"\n\n# extract user_id from jwt_data\nuser_id = "your user_id"\n\nchatclient = get_chat_client(user_id)\nchatclient.tls_set()\nchatclient.username_pw_set(username=user_id, password=jwt_data)\n\nchatclient.connect(CHAT_SERVER_DOMAIN, 443)\n')),(0,a.kt)("h3",{id:"send-message"},"Send message"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Get ",(0,a.kt)("strong",{parentName:"li"},"room_id")," from ",(0,a.kt)("a",{parentName:"li",href:"/docs/Web3MQ-SDK/Python-SDK/roomapi#get-room-list"},"Get my_rooms function"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import json\n\n# extract user_id from "access_token" from login api response\nuser_id = "your user_id"\n\ntopic = "msg/" + user_id\n\npayload = {\n    "from_uid" : user_id,\n    "to_room_id" : room_id,\n    "msg_contents" : "Hello SwapChat",\n    "msg_type" : "text"\n}\n\nchatclient.publish(topic, json.dumps(payload))\n')),(0,a.kt)("h3",{id:"on-connect"},"On connect"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"if your want to handler something when client connect succeed")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def on_connect(client, userdata, flags, rc):\n    print("Connected with result code " + str(rc))\n    # do your logic here\n\nchatclient.on_connect = on_connect\n')),(0,a.kt)("h3",{id:"on-message"},"On message"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The callback for when a PUBLISH message is received from the server.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def on_message(client, userdata, msg):\n    print(msg.topic + " " + str(msg.payload))\n    # do your logic here\n\nchatclient.on_message = on_message\n')))}d.isMDXComponent=!0}}]);