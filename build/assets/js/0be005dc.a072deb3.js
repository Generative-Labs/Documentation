"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[7731],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,k=c["".concat(o,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(k,s(s({ref:t},d),{},{components:n})):a.createElement(k,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1378:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],l={position:8},o="Standard List",p={unversionedId:"Web3MQ-SDK/JS-SDK/standards/standards",id:"Web3MQ-SDK/JS-SDK/standards/standards",title:"Standard List",description:"DidType",source:"@site/docs/Web3MQ-SDK/JS-SDK/standards/standards.md",sourceDirName:"Web3MQ-SDK/JS-SDK/standards",slug:"/Web3MQ-SDK/JS-SDK/standards/",permalink:"/docs/Web3MQ-SDK/JS-SDK/standards/",tags:[],version:"current",frontMatter:{position:8},sidebar:"tutorialSidebar",previous:{title:"Type List",permalink:"/docs/Web3MQ-SDK/JS-SDK/types/"},next:{title:"eventCenter",permalink:"/docs/Web3MQ-SDK/JS-SDK/eventCenter/"}},d={},u=[{value:"DidType",id:"didtype",level:3},{value:"DidValue",id:"didvalue",level:3},{value:"Master PrivateKey",id:"master-privatekey",level:3},{value:"Master PublicKey",id:"master-publickey",level:3},{value:"Sign Content",id:"sign-content",level:3},{value:"Sign Content of Master Keypair",id:"sign-content-of-master-keypair",level:4},{value:"Sign Content of Register",id:"sign-content-of-register",level:4},{value:"Temporary PrivateKey",id:"temporary-privatekey",level:3},{value:"Temporary PublicKey",id:"temporary-publickey",level:3},{value:"Userid",id:"userid",level:3},{value:"Web3MQ API Endpoints",id:"web3mq-api-endpoints",level:3},{value:"Wallet Address",id:"wallet-address",level:3},{value:"Wallet Sign",id:"wallet-sign",level:3},{value:"Wallet Type",id:"wallet-type",level:3}],c={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"standard-list"},"Standard List"),(0,i.kt)("h3",{id:"didtype"},"DidType"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Type of account bound to ",(0,i.kt)("inlineCode",{parentName:"p"},"web3mq"),".Only 'eth' and 'starknet' wallets are currently supported.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// 1. if you connect eth wallet\nconst didType = 'eth';\n// 2. if you conncet starknet wallet;\nconst didType = 'starknet';\n")),(0,i.kt)("h3",{id:"didvalue"},"DidValue"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"address of account bound to ",(0,i.kt)("inlineCode",{parentName:"p"},"web3mq"),".Currently only eth and starknet wallet addresses on the public chain are supported.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { connect } from 'get-starknet';\n// 1. if you connect eth wallet\nconst didValue = window.ethereum.selectedAddress;\n\n// 2. if you conncet starknet wallet;\nconst starknet = await connect();\nif (!starknet) {\n  return;\n}\nconst [didType] = await starknet.enable();\n")),(0,i.kt)("h3",{id:"master-privatekey"},"Master PrivateKey"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"}," The master privete key is the key generated by ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#wallet-sign"},"signature")," with js-sha256, and then the final string is encrypted with AES-GCM.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from '@web3mq/client';\nconst { secretKey: privateKey } = Cleint.register.getMainKeypair({\n  password: 'your enter password',\n  did_type: 'your did type',\n  did_value: 'your did value',\n})\n")),(0,i.kt)("h3",{id:"master-publickey"},"Master PublicKey"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The master public key is the key generated by ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#wallet-sign"},"signature")," with js-sha256, and then the string generated by @noble/ed25519.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from '@web3mq/client';\nconst { publicKey } = Cleint.register.getMainKeypair({\n  password: 'your enter password',\n  did_type: 'your did type',\n  did_value: 'your did value',\n})\n")),(0,i.kt)("h3",{id:"sign-content"},"Sign Content"),(0,i.kt)("h4",{id:"sign-content-of-master-keypair"},"Sign Content of Master Keypair"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"signature content in the form of a string consisting of ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#didtype"},"did_value"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#didvalue"},"did_type")," is used to generate the master key pair")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from '@web3mq/client';\nconst { signContent } = await Client.register.getMainKeypairSignContent({\n  password: 'your enter password', \n  did_value: 'your did value', \n  did_type: 'your did type'\n});\n")),(0,i.kt)("h4",{id:"sign-content-of-register"},"Sign Content of Register"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The signature body used for registration is passed as a string consisting of ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#master-publickey"},"mainPublicKey"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#didtype"},"didType"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#didvalue"},"didvalue"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#userid"},"userid"),", signContentURI.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from '@web3mq/client';\nconst { signContent } = await Client.register.getRegisterSignContent({\n  mainPublicKey: 'your master public key',\n  didType: 'your did type',\n  didValue: 'your did type',\n  userid: 'your userid',\n  signContentURI: window.location.origin\n})\n")),(0,i.kt)("h3",{id:"temporary-privatekey"},"Temporary PrivateKey"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Generate the temporary private key in hex string format using @noble/ed25519.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import ed from '@noble/ed25519';\n\nlet privateObj = ed.utils.randomPrivateKey();\nlet TempPrivateKey = Array.from(privateObj, (byte: any) => ('0' + (byte & 0xff).toString(16)).slice(-2)).join('');\n")),(0,i.kt)("h3",{id:"temporary-publickey"},"Temporary PublicKey"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Generate the temporary public key in hex string format using @noble/ed25519.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import ed from '@noble/ed25519';\n\nlet privateObj = ed.utils.randomPrivateKey();\nlet pubkeyObj = await ed.getPublicKey(privateObj);\nlet TempPublicKey = Array.from(pubkeyObj, (byte: any) => ('0' + (byte & 0xff).toString(16)).slice(-2)).join('');\n")),(0,i.kt)("h3",{id:"userid"},"Userid"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"String starting with ",(0,i.kt)("inlineCode",{parentName:"p"},"user:")," encrypted by ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#didtype"},"did_type")," + ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#didvalue"},"did_value")," + timestamp with sha3_224")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { sha3_224 } from 'js-sha3';\nconst timestamp = Date.now();\nconst did_type = 'eth';\nconst did_value = window.ethereum.selectedAddress;\nconst userid = `user:${sha3_224(did_type + did_value + timestamp)}`;\n")),(0,i.kt)("h3",{id:"web3mq-api-endpoints"},"Web3MQ API Endpoints"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"During this initial testing phase, we've hosted complete networks of Web3MQ nodes in different regions around the globe. Connect to these endpoints below, to access the Web3MQ Testnet.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"https")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-1.web3mq.com"},"https://testnet-us-west-1-1.web3mq.com")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://testnet-us-west-1-2.web3mq.com"},"https://testnet-us-west-1-2.web3mq.com")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-1.web3mq.com"},"https://testnet-ap-jp-1.web3mq.com")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://testnet-ap-jp-2.web3mq.com"},"https://testnet-ap-jp-2.web3mq.com")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-1.web3mq.com"},"https://testnet-ap-singapore-1.web3mq.com")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://testnet-ap-singapore-2.web3mq.com"},"https://testnet-ap-singapore-2.web3mq.com"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"wss")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"wss://testnet-us-west-1-1.web3mq.com"),(0,i.kt)("li",{parentName:"ul"},"wss://testnet-us-west-1-2.web3mq.com"),(0,i.kt)("li",{parentName:"ul"},"wss://testnet-ap-jp-1.web3mq.com"),(0,i.kt)("li",{parentName:"ul"},"wss://testnet-ap-jp-2.web3mq.com"),(0,i.kt)("li",{parentName:"ul"},"wss://testnet-ap-singapore-1.web3mq.com"),(0,i.kt)("li",{parentName:"ul"},"wss://testnet-ap-singapore-2.web3mq.com")),(0,i.kt)("h3",{id:"wallet-address"},"Wallet Address"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The wallet address on the public chain, currently only ",(0,i.kt)("inlineCode",{parentName:"p"},"eth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"starknet")," wallet addresses are supported.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from '@web3mq/client';\nconst didValue = await Cleint.register.getAccount('your wallet type');\n")),(0,i.kt)("h3",{id:"wallet-sign"},"Wallet Sign"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Get the signature by evoking the Client.sign method with ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#sign-content"},"signContent"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#wallet-address"},"address")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/Web3MQ-SDK/JS-SDK/standards/#wallet-type"},"walletType"),".Currently only ",(0,i.kt)("inlineCode",{parentName:"p"},"eth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"starknet")," wallet signatures are supported.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from '@web3mq/client';\nconst { sign } =  Client.register.sign(signContent: 'your sign content',address: 'your enter wallet address',walletType: 'your enter wallet type');\n")),(0,i.kt)("h3",{id:"wallet-type"},"Wallet Type"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The wallet type on the public chain, currently only ",(0,i.kt)("inlineCode",{parentName:"p"},"eth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"starknet")," type wallets are supported.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// 1. if you connect eth wallet\nconst wallet_type = 'eth';\n// 2. if you conncet starknet wallet;\nconst wallet_type = 'starknet';\n")))}m.isMDXComponent=!0}}]);