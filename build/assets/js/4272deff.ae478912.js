"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[3346],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=s,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4764:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const r={},o="MessageList",i={unversionedId:"Web3MQ-UI-Components/coreComponent/MessageList",id:"Web3MQ-UI-Components/coreComponent/MessageList",title:"MessageList",description:"The MessageList component renders a scrollable list of messages. The UI for each individual message is rendered conditionally based on its message.type value. The list renders date separators, new message notifications, system messages, deleted messages, and standard messages containing text and/or attachments.",source:"@site/docs/Web3MQ-UI-Components/coreComponent/MessageList.md",sourceDirName:"Web3MQ-UI-Components/coreComponent",slug:"/Web3MQ-UI-Components/coreComponent/MessageList",permalink:"/docs/Web3MQ-UI-Components/coreComponent/MessageList",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Channel List",permalink:"/docs/Web3MQ-UI-Components/coreComponent/ChannelList"},next:{title:"Thread",permalink:"/docs/Web3MQ-UI-Components/coreComponent/Thread"}},l={},c=[{value:"Basic Usage",id:"basic-usage",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"messagelist"},"MessageList"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageList")," component renders a scrollable list of messages. The UI for each individual message is rendered conditionally based on its ",(0,s.kt)("inlineCode",{parentName:"p"},"message.type")," value. The list renders date separators, new message notifications, system messages, deleted messages, and standard messages containing text and/or attachments."),(0,s.kt)("p",null,"By default, the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageList")," loads the most recent 20 messages held in the ",(0,s.kt)("inlineCode",{parentName:"p"},"channel.state"),". More messages are fetched from the Chat API and loaded into the DOM on scrolling up the list. The currently loaded messages are held in the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChannelStateContext")," and can be referenced with our custom hook."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const { messages } = useChannelStateContext();\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageList")," has no required props and by default pulls overridable data from the various contexts established in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Channel")," component. Customization of the messages rendered within the list is handled by the ",(0,s.kt)("inlineCode",{parentName:"p"},"Message UI")," component."),(0,s.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,s.kt)("p",null,"As a context consumer, the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageList")," component must be rendered as a child of the ",(0,s.kt)("inlineCode",{parentName:"p"},"Channel")," component. It can be rendered with or without a provided ",(0,s.kt)("inlineCode",{parentName:"p"},"messages")," prop. Providing your own ",(0,s.kt)("inlineCode",{parentName:"p"},"messages")," value will override the default value drawn from the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChannelStateContext"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const customMessages = [\n  // array of messages\n];\n\n<Chat client={client}>\n  <ChannelList />\n  <Channel>\n    <MessageList messages={customMessages} />\n    <MessageInput />\n  </Channel>\n</Chat>;\n")))}d.isMDXComponent=!0}}]);