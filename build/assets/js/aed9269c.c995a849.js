"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[6258],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,f=d["".concat(l,".").concat(g)]||d[g]||p[g]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8033:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={position:1},l="Quick Start",c={unversionedId:"Web3MQ-SDK/Swift-SDK/QuickStart/QuickStart",id:"Web3MQ-SDK/Swift-SDK/QuickStart/QuickStart",title:"Quick Start",description:"iOS Main Features",source:"@site/docs/Web3MQ-SDK/Swift-SDK/QuickStart/QuickStart.md",sourceDirName:"Web3MQ-SDK/Swift-SDK/QuickStart",slug:"/Web3MQ-SDK/Swift-SDK/QuickStart/",permalink:"/docs/Web3MQ-SDK/Swift-SDK/QuickStart/",tags:[],version:"current",frontMatter:{position:1},sidebar:"tutorialSidebar",previous:{title:"eventCenter",permalink:"/docs/Web3MQ-SDK/JS-SDK/eventCenter/"},next:{title:"Register",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Register/"}},u={},p=[{value:"iOS Main Features",id:"ios-main-features",level:2},{value:"Integrating the SDK",id:"integrating-the-sdk",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Installation",id:"installation",level:3},{value:"Swift Package Manager",id:"swift-package-manager",level:4},{value:"CocoaPods",id:"cocoapods",level:4},{value:"Initialize the SDK",id:"initialize-the-sdk",level:2},{value:"Connecting",id:"connecting",level:2},{value:"Signup",id:"signup",level:3},{value:"Connecting Automatically",id:"connecting-automatically",level:3},{value:"Connecting Manually",id:"connecting-manually",level:3},{value:"Connecting Status",id:"connecting-status",level:3},{value:"Channels",id:"channels",level:2},{value:"Messages",id:"messages",level:2},{value:"Sending Message",id:"sending-message",level:3},{value:"Receiving Message",id:"receiving-message",level:3},{value:"Notifications",id:"notifications",level:2},{value:"Receiving Notification",id:"receiving-notification",level:3}],d={toc:p};function g(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start"},"Quick Start"),(0,r.kt)("h2",{id:"ios-main-features"},"iOS Main Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Uses\xa0",(0,r.kt)("inlineCode",{parentName:"strong"},"UIKit"),"\xa0patterns and paradigms:"),"\xa0The API follows the design of native system SDKs. It makes integration with your existing code easy and familiar."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"First-class support for\xa0",(0,r.kt)("inlineCode",{parentName:"strong"},"Combine")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"Concurrency"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Swift native API:"),"\xa0Uses Swift's powerful language features to make the SDK usage easy and type-safe.")),(0,r.kt)("h2",{id:"integrating-the-sdk"},"Integrating the SDK"),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"before you run your project, make sure that your development environment is provided with:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Xcode 11"),(0,r.kt)("li",{parentName:"ul"},"iOS 13.0 or later")),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("h4",{id:"swift-package-manager"},"Swift Package Manager"),(0,r.kt)("p",null,"The\xa0",(0,r.kt)("a",{parentName:"p",href:"https://swift.org/package-manager/"},"Swift Package Manager"),"\xa0is a tool for automating the distribution of Swift code and is integrated into the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"swift"),"\xa0compiler."),(0,r.kt)("p",null,"Once you have your Swift package set up, adding Web3MQSDK as a dependency is as easy as adding it to the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"dependencies"),"\xa0value of your\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Package.swift"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'dependencies: [\n    .package(url: "git@github.com:Generative-Labs/Web3MQ-SDK-Swift.git", .upToNextMajor(from: "0.1.0"))\n]\n')),(0,r.kt)("h4",{id:"cocoapods"},"CocoaPods"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://cocoapods.org/"},"CocoaPods"),"\xa0is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate Alamofire into your Xcode project using CocoaPods, specify it in your\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"pod 'Web3MQSDK'\n")),(0,r.kt)("h2",{id:"initialize-the-sdk"},"Initialize the SDK"),(0,r.kt)("p",null,"Let's get started by initializing the client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import Web3MQSDK\n\n// the SDK will find the endpoint with lowest latency for you \nClient.shared.setup(with: Configuration(appKey: "{AppKey}"))\n\n// or you prefer to set a specific endpoint     \nClient.shared.setup(with: Configuration(appKey: "{AppKey}", endpoint: Endpoint.Dev.jp1))\n')),(0,r.kt)("h2",{id:"connecting"},"Connecting"),(0,r.kt)("h3",{id:"signup"},"Signup"),(0,r.kt)("p",null,"For any first-time user of Web3MQ's network, you'll need to auth on Web3MQ's network. SDK takes care of the key generation process and subsequent wallet signing process. ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.shared.connectWithMateMask")," is a utility method that does this automatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"// Keep your private key in a safe place!\nlet (keyPair, userId) = await Client.shared.connectWithMateMask()\n")),(0,r.kt)("p",null,"SDK will save the keypair in Keychain defaultly, you could disable it by setting keychainStore false "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let (keyPair, userId) = await Client.shared.connectWithMateMask(keychainStore: false)\n")),(0,r.kt)("h3",{id:"connecting-automatically"},"Connecting Automatically"),(0,r.kt)("p",null,"If there is a key-pair in keychain, it will automatically connect to that user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"Client.shared.autoConnect()\n")),(0,r.kt)("h3",{id:"connecting-manually"},"Connecting Manually"),(0,r.kt)("p",null,"You could also connect manually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'Client.shared.connect(with: KeyPair(privateKey: "{PrivteKey}", publicKey: "{PublicKey}"), userId: "{UserId}")\n')),(0,r.kt)("h3",{id:"connecting-status"},"Connecting Status"),(0,r.kt)("p",null,"If you want to react instantly with the connecting status updating, just subscribe this publisher:  ",(0,r.kt)("inlineCode",{parentName:"p"},"Client.shared.connectingStatusPublisher")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"let status: Web3MQConnectingStatus = Client.shared.connectingStatus\n\npublic enum Web3MQConnectingStatus {\n        case idle \n        // the SDK will always try to reconnect the Web3MQ network, so you don't need \n        // to care about that part.\n        case connecting\n        case connected(nodeId: String)\n        // only when you disconnect manually \n        case disconnected \n        case error(_ error: Error?)\n}\n")),(0,r.kt)("h2",{id:"channels"},"Channels"),(0,r.kt)("p",null,"Let\u2019s continue by initializing your first channel. A channel contains messages, a list of members that are watching the channel. The example below shows how to set up a channel to support chat for a group conversation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let channelId: String = await Client.shared.channelManager.createChannel(name: "{channel_name}") \n')),(0,r.kt)("h2",{id:"messages"},"Messages"),(0,r.kt)("p",null,"Now that we have the channel set up, let's send our first chat message:"),(0,r.kt)("h3",{id:"sending-message"},"Sending Message"),(0,r.kt)("p",null,"send a message to a user or a channel "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// sessionId: userId or channelId\nClient.shared.messageManager.sendMessage("{Text}", topicId: "{TopicId}") async throws\n')),(0,r.kt)("h3",{id:"receiving-message"},"Receiving Message"),(0,r.kt)("p",null,"subscribe the messagePublisher to receive messages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"Client.shared.messageManager.messagePublisher\n")),(0,r.kt)("h2",{id:"notifications"},"Notifications"),(0,r.kt)("h3",{id:"receiving-notification"},"Receiving Notification"),(0,r.kt)("p",null,"The notification is also a specific message. Just subscribe the ",(0,r.kt)("inlineCode",{parentName:"p"},"notificationPublisher")," to receive notifications."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"Client.shared.notificationManager.notificationPublisher\n")))}g.isMDXComponent=!0}}]);