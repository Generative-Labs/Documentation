"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[724],{3905:(t,n,e)=>{e.d(n,{Zo:()=>p,kt:()=>d});var i=e(7294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function r(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,i,a=function(t,n){if(null==t)return{};var e,i,a={},o=Object.keys(t);for(i=0;i<o.length;i++)e=o[i],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)e=o[i],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var c=i.createContext({}),l=function(t){var n=i.useContext(c),e=n;return t&&(e="function"==typeof t?t(n):r(r({},n),t)),e},p=function(t){var n=l(t.components);return i.createElement(c.Provider,{value:n},t.children)},u={inlineCode:"code",wrapper:function(t){var n=t.children;return i.createElement(i.Fragment,{},n)}},b=i.forwardRef((function(t,n){var e=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),b=l(e),d=a,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||o;return e?i.createElement(m,r(r({ref:n},p),{},{components:e})):i.createElement(m,r({ref:n},p))}));function d(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var o=e.length,r=new Array(o);r[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=t,s.mdxType="string"==typeof t?t:a,r[1]=s;for(var l=2;l<o;l++)r[l]=e[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,e)}b.displayName="MDXCreateElement"},7433:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=e(7462),a=(e(7294),e(3905));const o={position:8.1},r="Pub/Sub",s={unversionedId:"Web3MQ-SDK/JS-SDK/PubSub/PubSub",id:"Web3MQ-SDK/JS-SDK/PubSub/PubSub",title:"Pub/Sub",description:"Properties",source:"@site/docs/Web3MQ-SDK/JS-SDK/PubSub/PubSub.md",sourceDirName:"Web3MQ-SDK/JS-SDK/PubSub",slug:"/Web3MQ-SDK/JS-SDK/PubSub/",permalink:"/docs/Web3MQ-SDK/JS-SDK/PubSub/",draft:!1,tags:[],version:"current",frontMatter:{position:8.1},sidebar:"tutorialSidebar",previous:{title:"Notify",permalink:"/docs/Web3MQ-SDK/JS-SDK/notify/"},next:{title:"Encryption",permalink:"/docs/Web3MQ-SDK/JS-SDK/encryption/"}},c={},l=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Pub/Sub Example",id:"pubsub-example",level:2},{value:"init Client",id:"init-client",level:2},{value:"createTopic",id:"createtopic",level:2},{value:"subscribeTopic",id:"subscribetopic",level:2},{value:"publishTopicMessage",id:"publishtopicmessage",level:2},{value:"getMyCreateTopicList",id:"getmycreatetopiclist",level:2},{value:"getMySubscribeTopicList",id:"getmysubscribetopiclist",level:2},{value:"Get NotificationList",id:"get-notificationlist",level:2}],p={toc:l};function u(t){let{components:n,...e}=t;return(0,a.kt)("wrapper",(0,i.Z)({},p,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pubsub"},"Pub/Sub"),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"myTopicList"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#topiclisttype"},"TopicListType")," ","[ ]"," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"myTopicList list")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mySubscribeList"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#subscribelisttype"},"SubscribeListType")," ","[ ]"," ","|"," null"),(0,a.kt)("td",{parentName:"tr",align:null},"mySubscribeList list")))),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"name"),(0,a.kt)("th",{parentName:"tr",align:null},"type"),(0,a.kt)("th",{parentName:"tr",align:null},"Parameters Description"),(0,a.kt)("th",{parentName:"tr",align:null},"response"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"createTopic"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"topic_name: string"),(0,a.kt)("td",{parentName:"tr",align:null},'{ "topicid": string }')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"subscribeTopic"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"topicid: string"),(0,a.kt)("td",{parentName:"tr",align:null},'{ "code": 0, "msg": "ok"}')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"publishTopicMessage"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},"params: { topicid: string; title: string; content: string }"),(0,a.kt)("td",{parentName:"tr",align:null},'{ "code": 0, "msg": "ok"}')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"getMyCreateTopicList"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#pageparams"},"PageParams")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#topiclisttype"},"TopicListType"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"getMySubscribeTopicList"),(0,a.kt)("td",{parentName:"tr",align:null},"function"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#pageparams"},"PageParams")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/JS-SDK/types/#subscribelisttype"},"SubscribeListType"))))),(0,a.kt)("h2",{id:"pubsub-example"},"Pub/Sub Example"),(0,a.kt)("blockquote",null,(0,a.kt)("ol",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ol"},"Copy the ",(0,a.kt)("a",{parentName:"li",href:"/docs/Web3MQ-SDK/JS-SDK/quickStart/#root-components-code"},"Root Components")," Code to App.tsx"),(0,a.kt)("li",{parentName:"ol"},"Create a Child.tsx file and copy the Child Components Code to Child.tsx"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useEffect, useState } from 'react';\nimport { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nconst Child: React.FC<IProps> = (props) => {\n  const { client } = props;\n  const [topicName, setTopicName] = useState<string>('');\n  const [topicId, setTopicId] = useState<string>('');\n  const [notifyList, setNotifyList] = useState<any>([]);\n  const [myTopicList, setMyTopicList] = useState<any>(null);\n  const [mySubscribeList, setMySubscribeList] = useState<any>(null);\n\n  const handleEvent = (event: { type: string }) => {\n    const { type } = event;\n    if (type === 'notification.getList') {\n      console.log('notification list -------', client.notify.notificationList);\n      setNotifyList([...notifyList, ...(client.notify.notificationList as [])]);\n    }\n    if (type === 'notification.getMyTopicList') {\n      console.log('MyTopicList------', client);\n      setMyTopicList(client.topic.myTopicList);\n    }\n    if (type === 'notification.getMySubscribeList') {\n      console.log('MySubscribeList------', client.topic.mySubscribeList);\n      setMySubscribeList(client.topic.mySubscribeList);\n    }\n  };\n\n  const getMyTopicList = async () => {\n    const data = await client.topic.getMyCreateTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  const getMySubscribeList = async () => {\n    const data = await client.topic.getMySubscribeTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  useEffect(() => {\n    client.on('notification.getList', handleEvent);\n    client.on('notification.getMyTopicList', handleEvent);\n    client.on('notification.getMySubscribeList', handleEvent);\n    return () => {\n      client.off('notification.getList', handleEvent);\n      client.off('notification.getMyTopicList', handleEvent);\n      client.off('notification.getMySubscribeList', handleEvent);\n    };\n  }, [notifyList]);\n\n  useEffect(() => {\n    getMyTopicList();\n    getMySubscribeList();\n  }, []);\n\n  const handleCreate = async () => {\n    const data = await client.topic.createTopic(topicName);\n    console.log(data);\n    await getMyTopicList();\n  };\n\n  const handleSubscribe = async () => {\n    const data = await client.topic.subscribeTopic(topicId);\n    console.log(data);\n    await getMySubscribeList();\n  };\n\n  const handlePublishMsg = async () => {\n    const params = {\n      topicid: topicId,\n      title: 'test title',\n      content: 'test content',\n    };\n    await client.topic.publishTopicMessage(params);\n  };\n\n  return (\n    <div>\n      <h1>1. Create Topic</h1>\n      <div>\n        Write topic name------\n        <input\n          type='text'\n          value={topicName}\n          onChange={(e) => {\n            setTopicName(e.target.value);\n          }}\n        />\n        <button onClick={handleCreate}>Create Topic</button>\n      </div>\n      <h4>My Topic List</h4>\n      {myTopicList?.map((item: any, idx: number) => (\n        <div key={item.topicid}>\n          {`topicid${idx + 1}-------`} <b>{item.topicid}</b>\n        </div>\n      ))}\n      <br />\n      <br />\n\n      <h1>2. Subscribe Topic</h1>\n      <div>\n        Write subscribe topic ID------\n        <input\n          type='text'\n          value={topicId}\n          onChange={(e) => {\n            setTopicId(e.target.value);\n          }}\n        />\n        <button onClick={handleSubscribe}>Subscribe Topic</button>\n      </div>\n      <h4>My Subscribe List</h4>\n      {mySubscribeList?.map((item: any, idx: number) => (\n        <div key={item.topicid}>\n          {`topicid${idx + 1}-------`}\n          <b>{item.topicid}</b>\n        </div>\n      ))}\n      <br />\n      <br />\n\n      <h1>3. Publish Msg</h1>\n      <div>\n        Write subscribe topic ID------\n        <input\n          type='text'\n          value={topicId}\n          onChange={(e) => {\n            setTopicId(e.target.value);\n          }}\n        />\n        <button onClick={handlePublishMsg}>publish Msg</button>\n      </div>\n      <h1>4. Notify List</h1>\n      {notifyList?.map((item: any, idx: number) => (\n        <div key={item.timestamp}>\n          {`notify${idx + 1}-------title:`}\n          <b>{item.title}</b>, content: <b>{item.content}</b>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Child;\n")),(0,a.kt)("h2",{id:"init-client"},"init Client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n// 1. You must initialize the SDK, the init function is asynchronous\nawait Client.init({\n  connectUrl: 'example url', // The fastURL you saved to local\n  app_key: 'app_key', // Appkey applied from our team\n});\n// 2. sign MetaMask get keys\nconst { PrivateKey, PublicKey, userid } = await Client.register.signMetaMask({\n  signContentURI: 'https://www.web3mq.com', // your signContent URI\n  EthAddress: 'your eth address', // *Not required*  your eth address, if not use your MetaMask eth address\n});\nconst keys = { PrivateKey, PublicKey, userid };\n// 3. You must ensure that the Client.init initialization is complete and that you have a key pair\nconst client = Client.getInstance(keys);\n\nconsole.log(client);\n\nexport const Child = () => {\n  return (\n    <div>\n      <Child client={client} />\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"createtopic"},"createTopic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleCreate = async () => {\n    const data = await client.notify.createTopic('topic_name');\n    console.log(data);\n    setTopic(data.topicid);\n  };\n\n  return (\n    <div>\n      <button onClick={handleCreate}>Create Topic</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"subscribetopic"},"subscribeTopic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleSubscribe = async () => {\n    const data = await client.notify.subscribeTopic('topicid');\n    console.log(data);\n  };\n\n  return (\n    <div>\n      <button onClick={handleSubscribe}>Subscribe Topic</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"publishtopicmessage"},"publishTopicMessage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handlePublishMsg = async () => {\n    const params = {\n      topicid: 'topic',\n      title: 'test title',\n      content: 'test content',\n    };\n    await client.notify.publishTopicMessage(params);\n  };\n\n  return (\n    <div>\n      <button onClick={handlePublishMsg}>publish Msg</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"getmycreatetopiclist"},"getMyCreateTopicList"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect } from 'react';\nimport { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleEvent = (event: { type: any }) => {\n    if (event.type === 'notification.getMyTopicList') {\n      console.log(client.notify.myTopicList);\n    }\n  };\n\n  useEffect(() => {\n    client.on('notification.getMyTopicList', handleEvent);\n    return () => {\n      client.off('notification.getMyTopicList');\n    };\n  }, []);\n\n  const getMyTopicList = async () => {\n    const data = await client.notify.getMyCreateTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  return (\n    <div>\n      <button onClick={getMyTopicList}>getMyCreateTopicList</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"getmysubscribetopiclist"},"getMySubscribeTopicList"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect } from 'react';\nimport { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleEvent = (event: { type: any }) => {\n    if (event.type === 'notification.getMySubscribeList') {\n      console.log(client.notify.mySubscribeList);\n    }\n  };\n\n  useEffect(() => {\n    client.on('notification.getMySubscribeList', handleEvent);\n    return () => {\n      client.off('notification.getMySubscribeList');\n    };\n  }, []);\n\n  const getMySubscribeList = async () => {\n    const data = await client.notify.getMySubscribeTopicList({\n      page: 1,\n      size: 100,\n    });\n    console.log(data);\n  };\n\n  return (\n    <div>\n      <button onClick={getMySubscribeList}>getMySubscribeTopicList</button>\n    </div>\n  );\n};\n")),(0,a.kt)("h2",{id:"get-notificationlist"},"Get NotificationList"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useEffect } from 'react';\nimport { Client } from 'web3-mq';\n\ninterface IProps {\n  client: Client;\n}\n\nexport const Child = (props: IProps) => {\n  const { client } = props;\n\n  const handleEvent = (event: { type: any }) => {\n    if (event.type === 'notification.getList') {\n      console.log(client.notify.notificationList);\n    }\n  };\n\n  useEffect(() => {\n    client.on('notification.getList', handleEvent);\n    return () => {\n      client.off('notification.getList');\n    };\n  }, []);\n\n  return <div>Notify Test</div>;\n};\n")))}u.isMDXComponent=!0}}]);