"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[4338],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=o,b=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(b,c(c({ref:n},l),{},{components:t})):r.createElement(b,c({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=t[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},493:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],i={nav:{title:"docs"},title:"Heartbeat",order:30,sidebar_position:30},s="Heartbeat Ping/Pong",p={unversionedId:"Web3MQ-API/heartbeat",id:"Web3MQ-API/heartbeat",title:"Heartbeat",description:"Keep websocket connection alive",source:"@site/docs/Web3MQ-API/heartbeat.md",sourceDirName:"Web3MQ-API",slug:"/Web3MQ-API/heartbeat",permalink:"/docs/Web3MQ-API/heartbeat",tags:[],version:"current",sidebarPosition:30,frontMatter:{nav:{title:"docs"},title:"Heartbeat",order:30,sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"ProtoType",permalink:"/docs/Web3MQ-API/ProtoType"},next:{title:"ed25519key",permalink:"/docs/Web3MQ-API/ed25519key"}},l={},u=[{value:"Send ping data",id:"send-ping-data",level:2}],m={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"heartbeat-pingpong"},"Heartbeat Ping/Pong"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Keep websocket connection alive")),(0,a.kt)("p",null,"Websocket client can send WebsocketPingCommand once every 60 seconds to keep connection alive"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'syntax = "proto3";\n\npackage pb;\n\nmessage WebsocketPingCommand {\n    optional string nodeId = 1;\n    optional string userId = 2;\n    optional uint64 timestamp = 3;\n    optional string msgSign = 4;\n}\n\nmessage WebsocketPongCommand {\n    optional string nodeId = 1;\n    optional string userId = 2;\n    optional uint64 timestamp = 3;\n    optional string msgSign = 4;\n}\n')),(0,a.kt)("h2",{id:"send-ping-data"},"Send ping data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { WebsocketPingCommand } from \"@/pb/heartbeat\";\n\nconst WS_PROTOCOL = 'wss'; // ws or wss\n\nconst HostURL = 'us-west-2.web3mq.com'; // choose one domain\n\n\nconst PbTypePingCommand = 0b10000000;\n\nconst GetContactBytes = (command: any, bytes: Uint8Array) => {\n  // client category type\n  const categoryType = 10;\n  const concatArray = new Uint8Array([categoryType, command, ...bytes]);\n\n  return concatArray;\n};\n\nconst GetWSConn = () => {\n  const wsurl = WS_PROTOCOL + '://' + HostURL + '/messages';\n  const wsconn = new WebSocket(wsurl);\n  wsconn.binaryType = 'arraybuffer'; // !important Web3MQ send message use protobuf\n  return wsconn;\n};\n\nlet wsconn = GetWSConn();\n\nconst ClientPingHandler = (NodeId: string) => {\n    const timestamp = Date.now();\n\n    const reqCommand: WebsocketPingCommand = {\n        timestamp: BigInt(timestamp),\n    }\n    let bytes = WebsocketPingCommand.toBinary(reqCommand);\n\n    const concatArray = GetContactBytes(PbTypePingCommand, bytes);\n\n    wsconn.send(concatArray);\n}\n\n")))}d.isMDXComponent=!0}}]);