"use strict";(self.webpackChunkchat_service_api_doc=self.webpackChunkchat_service_api_doc||[]).push([[2497],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return d}});var i=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=i.createContext({}),s=function(t){var e=i.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},p=function(t){var e=s(t.components);return i.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},f=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),f=s(n),d=a,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||o;return n?i.createElement(m,r(r({ref:e},p),{},{components:n})):i.createElement(m,r({ref:e},p))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,r=new Array(o);r[0]=f;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=t,c.mdxType="string"==typeof t?t:a,r[1]=c;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3676:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],c={position:7},l="Notifications",s={unversionedId:"Web3MQ-SDK/Swift-SDK/Notifications/Notifications",id:"Web3MQ-SDK/Swift-SDK/Notifications/Notifications",title:"Notifications",description:"Methods",source:"@site/docs/Web3MQ-SDK/Swift-SDK/Notifications/Notifications.md",sourceDirName:"Web3MQ-SDK/Swift-SDK/Notifications",slug:"/Web3MQ-SDK/Swift-SDK/Notifications/",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Notifications/",tags:[],version:"current",frontMatter:{position:7},sidebar:"tutorialSidebar",previous:{title:"User",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Users/"},next:{title:"Topics",permalink:"/docs/Web3MQ-SDK/Swift-SDK/Topics/"}},p={},u=[{value:"Methods",id:"methods",level:2},{value:"Updating Notification Status",id:"updating-notification-status",level:2},{value:"Search Notifications by TopicId",id:"search-notifications-by-topicid",level:2},{value:"Receiving Notification",id:"receiving-notification",level:2},{value:"Notification Content",id:"notification-content",level:2}],f={toc:u};function d(t){var e=t.components,n=(0,a.Z)(t,r);return(0,o.kt)("wrapper",(0,i.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"notifications"},"Notifications"),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"name"),(0,o.kt)("th",{parentName:"tr",align:null},"Parameters Description"),(0,o.kt)("th",{parentName:"tr",align:null},"response"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"updateNotificationStatus"),(0,o.kt)("td",{parentName:"tr",align:null},"messages: string[], status: ",(0,o.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/Swift-SDK/Structs/###NotificationStatus"},"NotificationStatus")),(0,o.kt)("td",{parentName:"tr",align:null},"success: Bool")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"searchNotifications"),(0,o.kt)("td",{parentName:"tr",align:null},"topicId: String, page: Int, size: Int"),(0,o.kt)("td",{parentName:"tr",align:null},"notifications: ",(0,o.kt)("a",{parentName:"td",href:"/docs/Web3MQ-SDK/Swift-SDK/Structs/###Notification"},"Notification"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"receiving notifications"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h2",{id:"updating-notification-status"},"Updating Notification Status"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'let isSuccess = await Client.shared.notificationManager.updateNotificationStatus(notifications: ["{notificationId}"], status: .read)\n')),(0,o.kt)("h2",{id:"search-notifications-by-topicid"},"Search Notifications by TopicId"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'let notifications: [Notifications] = await Client.shared.notificationManager.getNotifications(by: "{NotificationType}", page: 0, size: 20)\n')),(0,o.kt)("h2",{id:"receiving-notification"},"Receiving Notification"),(0,o.kt)("p",null,"The notification is also a specific message. Just subscribe the ",(0,o.kt)("inlineCode",{parentName:"p"},"notificationPublisher")," to receive notifications."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"Client.shared.notificationManager.notificationPublisher\n")),(0,o.kt)("h2",{id:"notification-content"},"Notification Content"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"public struct Web3MQNotificationContent: Codable {\n    \n    public let title: String?\n    public let content: String?\n    public let type: String?\n}\n\npublic struct Web3MQNotification: Codable {\n\n    public let cipherSuite: String?\n    public let from: String?\n    public let topic: String?\n    public let fromSign: String?\n    public let messageId: String?\n    public let payloadType: String?\n    public let timestamp: UInt64?\n    public let payload: Web3MQNotificationContent?\n    public let version: Int?\n    \n}\n")))}d.isMDXComponent=!0}}]);